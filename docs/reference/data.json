{
    "project": {
        "name": "p5.sound",
        "description": "",
        "version": "0.1.9",
        "url": ""
    },
    "files": {
        "src\\amplitude.js": {
            "name": "src\\amplitude.js",
            "modules": {},
            "classes": {
                "p5.Amplitude": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\audioin.js": {
            "name": "src\\audioin.js",
            "modules": {},
            "classes": {
                "p5.AudioIn": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\delay.js": {
            "name": "src\\delay.js",
            "modules": {},
            "classes": {
                "p5.Delay": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\env.js": {
            "name": "src\\env.js",
            "modules": {},
            "classes": {
                "p5.Env": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\fft.js": {
            "name": "src\\fft.js",
            "modules": {},
            "classes": {
                "p5.FFT": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\filter.js": {
            "name": "src\\filter.js",
            "modules": {},
            "classes": {
                "p5.Filter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\helpers.js": {
            "name": "src\\helpers.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\looper.js": {
            "name": "src\\looper.js",
            "modules": {},
            "classes": {
                "p5.Phrase": 1,
                "p5.Part": 1,
                "p5.Score": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\master.js": {
            "name": "src\\master.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\noise.js": {
            "name": "src\\noise.js",
            "modules": {},
            "classes": {
                "p5.Noise": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\onsetDetect.js": {
            "name": "src\\onsetDetect.js",
            "modules": {},
            "classes": {
                "p5.OnsetDetect": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\oscillator.js": {
            "name": "src\\oscillator.js",
            "modules": {},
            "classes": {
                "p5.Oscillator": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\peakDetect.js": {
            "name": "src\\peakDetect.js",
            "modules": {},
            "classes": {
                "p5.PeakDetect": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\pulse.js": {
            "name": "src\\pulse.js",
            "modules": {},
            "classes": {
                "p5.Pulse": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\reverb.js": {
            "name": "src\\reverb.js",
            "modules": {},
            "classes": {
                "p5.Reverb": 1,
                "p5.Convolver": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\signal.js": {
            "name": "src\\signal.js",
            "modules": {},
            "classes": {
                "p5.Signal": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\sndcore.js": {
            "name": "src\\sndcore.js",
            "modules": {
                "p5.sound": 1
            },
            "classes": {},
            "fors": {
                "p5.sound": 1
            },
            "namespaces": {}
        },
        "src\\soundRecorder.js": {
            "name": "src\\soundRecorder.js",
            "modules": {},
            "classes": {
                "p5.SoundRecorder": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\soundfile.js": {
            "name": "src\\soundfile.js",
            "modules": {},
            "classes": {
                "p5.SoundFile": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "p5.sound": {
            "name": "p5.sound",
            "submodules": {},
            "classes": {
                "p5.Amplitude": 1,
                "p5.AudioIn": 1,
                "p5.Delay": 1,
                "p5.Env": 1,
                "p5.FFT": 1,
                "p5.Filter": 1,
                "p5.Phrase": 1,
                "p5.Part": 1,
                "p5.Score": 1,
                "p5.Noise": 1,
                "p5.OnsetDetect": 1,
                "p5.Oscillator": 1,
                "p5.PeakDetect": 1,
                "p5.Pulse": 1,
                "p5.Reverb": 1,
                "p5.Convolver": 1,
                "p5.Signal": 1,
                "p5.sound": 1,
                "p5.SoundRecorder": 1,
                "p5.SoundFile": 1
            },
            "fors": {
                "p5.sound": 1
            },
            "namespaces": {},
            "module": "p5.sound",
            "file": "src\\soundfile.js",
            "line": 9,
            "description": "p5.sound extends p5 with <a href=\"http://caniuse.com/audio-api\"\ntarget=\"_blank\">Web Audio</a> functionality including audio input,\nplayback, analysis and synthesis.\n<br/><br/>\n<a href=\"#/p5.SoundFile\"><b>p5.SoundFile</b></a>: Load and play sound files.<br/>\n<a href=\"#/p5.Amplitude\"><b>p5.Amplitude</b></a>: Get the current volume of a sound.<br/>\n<a href=\"#/p5.AudioIn\"><b>p5.AudioIn</b></a>: Get sound from an input source, typically\n  a computer microphone.<br/>\n<a href=\"#/p5.FFT\"><b>p5.FFT</b></a>: Analyze the frequency of sound. Returns\n  results from the frequency spectrum or time domain (waveform).<br/>\n<a href=\"#/p5.Oscillator\"><b>p5.Oscillator</b></a>: Generate Sine,\n  Triangle, Square and Sawtooth waveforms. Base class of\n  <a href=\"#/p5.Noise\">p5.Noise</a> and <a href=\"#/p5.Pulse\">p5.Pulse</a>.\n  <br/>\n<a href=\"#/p5.Env\"><b>p5.Env</b></a>: An Envelope is a series\n  of fades over time. Often used to control an object's\n  output gain level as an \"ADSR Envelope\" (Attack, Decay,\n  Sustain, Release). Can also modulate other parameters.<br/>\n<a href=\"#/p5.Delay\"><b>p5.Delay</b></a>: A delay effect with\n  parameters for feedback, delayTime, and lowpass filter.<br/>\n<a href=\"#/p5.Filter\"><b>p5.Filter</b></a>: Filter the frequency range of a\n  sound.\n<br/>\n<a href=\"#/p5.Reverb\"><b>p5.Reverb</b></a>: Add reverb to a sound by specifying\n  duration and decay. <br/>\n<b><a href=\"#/p5.Convolver\">p5.Convolver</a>:</b> Extends\n<a href=\"#/p5.Reverb\">p5.Reverb</a> to simulate the sound of real\n  physical spaces through convolution.<br/>\n<b><a href=\"#/p5.SoundRecorder\">p5.SoundRecorder</a></b>: Record sound for playback \n  / save the .wav file.\n<b><a href=\"#/p5.Phrase\">p5.Phrase</a></b>, <b><a href=\"#/p5.Part\">p5.Part</a></b> and\n<b><a href=\"#/p5.Score\">p5.Score</a></b>: Compose musical sequences.\n<br/><br/>\np5.sound is on <a href=\"https://github.com/therewasaguy/p5.sound/\">GitHub</a>.\nDownload the latest version \n<a href=\"https://github.com/therewasaguy/p5.sound/blob/master/lib/p5.sound.js\">here</a>.",
            "tag": "main",
            "itemtype": "main"
        }
    },
    "classes": {
        "p5.Amplitude": {
            "name": "p5.Amplitude",
            "shortname": "p5.Amplitude",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "p5.sound",
            "file": "src\\amplitude.js",
            "line": 5,
            "description": "Amplitude measures volume between 0.0 and 1.0.\nListens to all p5sound by default, or use setInput()\nto listen to a specific sound source. Accepts an optional\nsmoothing value, which defaults to 0.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "smoothing",
                    "description": "between 0.0 and .999 to smooth\n                           amplitude readings (defaults to 0)",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "Amplitude Object",
                "type": "Object"
            },
            "example": [
                "\n<div><code>\nvar sound, amplitude, cnv;\n\nfunction preload(){\n  sound = loadSound('assets/beat.mp3');\n}\nfunction setup() {\n  cnv = createCanvas(100,100);\n  amplitude = new p5.Amplitude();\n\n  // start / stop the sound when canvas is clicked\n  cnv.mouseClicked(function() {\n    if (sound.isPlaying() ){\n      sound.stop();\n    } else {\n      sound.play();\n    }\n  });\n}\nfunction draw() {\n  background(0);\n  fill(255);\n  var level = amplitude.getLevel();\n  var size = map(level, 0, 1, 0, 200);\n  ellipse(width/2, height/2, size, size);\n}\n\n</code></div>"
            ]
        },
        "p5.AudioIn": {
            "name": "p5.AudioIn",
            "shortname": "p5.AudioIn",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "p5.sound",
            "file": "src\\audioin.js",
            "line": 6,
            "description": "<p>Get audio from an input, i.e. your computer's microphone.</p>\n\n<p>Turn the mic on/off with the start() and stop() methods. When the mic\nis on, its volume can be measured with getLevel or by connecting an\nFFT object.</p>\n\n<p>If you want to hear the AudioIn, use the .connect() method. \nAudioIn does not connect to p5.sound output by default to prevent\nfeedback.</p> \n\n<p><em>Note: This uses the <a href=\"http://caniuse.com/stream\">getUserMedia/\nStream</a> API, which is not supported by certain browsers.</em></p>",
            "is_constructor": 1,
            "return": {
                "description": "AudioIn",
                "type": "Object"
            },
            "example": [
                "\n<div><code>\nvar mic;\nfunction setup(){\n  mic = new p5.AudioIn()\n  mic.start();\n}\nfunction draw(){\n  background(0);\n  micLevel = mic.getLevel();\n  ellipse(width/2, constrain(height-micLevel*height*5, 0, height), 10, 10);\n}\n</code></div>"
            ]
        },
        "p5.Delay": {
            "name": "p5.Delay",
            "shortname": "p5.Delay",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "p5.sound",
            "file": "src\\delay.js",
            "line": 6,
            "description": "Delay is an echo effect. It processes an existing sound source,\nand outputs a delayed version of that sound. The p5.Delay can\nproduce different effects depending on the delayTime, feedback,\nfilter, and type. In the example below, a feedback of 0.5 will\nproduce a looping delay that decreases in volume by\n50% each repeat. A filter will cut out the high frequencies so\nthat the delay does not sound as piercing as the original source.",
            "is_constructor": 1,
            "return": {
                "description": "Returns a p5.Delay object",
                "type": "Object"
            },
            "example": [
                "\n<div><code>\nvar noise, env, delay;\n\nfunction setup() {\n  background(0);\n  noStroke();\n  fill(255);\n  textAlign(CENTER);\n  text('click to play', width/2, height/2);\n  \n  noise = new p5.Noise('brown');\n  noise.amp(0);\n  noise.start();\n  \n  delay = new p5.Delay();\n\n  // delay.process() accepts 4 parameters:\n  // source, delayTime, feedback, filter frequency\n  // play with these numbers!!\n  delay.process(noise, .12, .7, 2300);\n  \n  // play the noise with an envelope,\n  // a series of fades ( time / value pairs )\n  env = new p5.Env(.01, 0.2, .2, .1);\n}\n\n// mouseClick triggers envelope\nfunction mouseClicked() {\n  // is mouse over canvas?\n  if (mouseX > 0 && mouseX < width && mouseY > 0 && mouseY < height) {\n    env.play(noise);\n  }\n}\n</code></div>"
            ]
        },
        "p5.Env": {
            "name": "p5.Env",
            "shortname": "p5.Env",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "p5.sound",
            "file": "src\\env.js",
            "line": 19,
            "description": "<p>Envelopes are pre-defined amplitude distribution over time. \nThe p5.Env accepts up to four time/level pairs, where time\ndetermines how long of a ramp before value reaches level.\nTypically, envelopes are used to control the output volume\nof an object, a series of fades referred to as Attack, Decay,\nSustain and Release (ADSR). But p5.Env can control any\nWeb Audio Param, for example it can be passed to an Oscillator\nfrequency like osc.freq(env) </p>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "aTime",
                    "description": "Time (in seconds) before level\n                               reaches attackLevel",
                    "type": "Number"
                },
                {
                    "name": "aLevel",
                    "description": "Typically an amplitude between\n                               0.0 and 1.0",
                    "type": "Number"
                },
                {
                    "name": "dTime",
                    "description": "Time",
                    "type": "Number"
                },
                {
                    "name": "dLevel",
                    "description": "Amplitude (In a standard ADSR envelope,\n                               decayLevel = sustainLevel)",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "sTime",
                    "description": "Time (in seconds)",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "sLevel",
                    "description": "Amplitude 0.0 to 1.0",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "rTime",
                    "description": "Time (in seconds)",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "rLevel",
                    "description": "Amplitude 0.0 to 1.0",
                    "type": "Number",
                    "optional": true
                }
            ],
            "example": [
                "\n<div><code>\nvar aT = 0.1; // attack time in seconds\nvar aL = 0.7; // attack level 0.0 to 1.0\nvar dT = 0.3; // decay time in seconds\nvar dL = 0.1; // decay level  0.0 to 1.0\nvar sT = 0.2; // sustain time in seconds\nvar sL = dL; // sustain level  0.0 to 1.0\nvar rT = 0.5; // release time in seconds\n// release level defaults to zero\n\nvar env;\nvar triOsc;\n\nfunction setup() {\n  background(0);\n  noStroke();\n  fill(255);\n  textAlign(CENTER);\n  text('click to play', width/2, height/2);\n\n  env = new p5.Env(aT, aL, dT, dL, sT, sL, rT);\n  triOsc = new p5.Oscillator('triangle');\n  triOsc.amp(env); // give the env control of the triOsc's amp\n  triOsc.start();\n}\n\n// mouseClick triggers envelope if over canvas\nfunction mouseClicked() {\n  // is mouse over canvas?\n  if (mouseX > 0 && mouseX < width && mouseY > 0 && mouseY < height) {\n    env.play(noise);\n  }\n}\n</code></div>"
            ]
        },
        "p5.FFT": {
            "name": "p5.FFT",
            "shortname": "p5.FFT",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "p5.sound",
            "file": "src\\fft.js",
            "line": 6,
            "description": "<p>FFT (Fast Fourier Transform) is an analysis algorithm that\nisolates individual\n<a href=\"https://en.wikipedia.org/wiki/Audio_frequency\">\naudio frequencies</a> within a waveform.</p>\n\n<p>Once instantiated, a p5.FFT object can return an array based on\ntwo types of analyses: <br> • <code>FFT.waveform()</code> computes\namplitude values along the time domain. The array indices correspond\nto samples across a brief moment in time. Each value represents\namplitude of the waveform at that sample of time.<br>\n• <code>FFT.analyze() </code> computes amplitude values along the\nfrequency domain. The array indices correspond to frequencies (i.e.\npitches), from the lowest to the highest that humans can hear. Each\nvalue represents amplitude at that slice of the frequency spectrum.\nUse with <code>getEnergy()</code> to measure amplitude at specific\nfrequencies, or within a range of frequencies. </p>\n\n<p>FFT analyzes a very short snapshot of sound called a sample\nbuffer. It returns an array of amplitude measurements, referred\nto as <code>bins</code>. The array is 1024 bins long by default.\nYou can change the bin array length, but it must be a power of 2\nbetween 16 and 1024 in order for the FFT algorithm to function\ncorrectly. The actual size of the FFT buffer is twice the \nnumber of bins, so given a standard sample rate, the buffer is\n2048/44100 seconds long.</p>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "smoothing",
                    "description": "Smooth results of Freq Spectrum.\n                              0.0 < smoothing < 1.0.\n                              Defaults to 0.8.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "bins",
                    "description": "Length of resulting array.\n                          Must be a power of two between\n                          16 and 1024. Defaults to 1024.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "FFT Object",
                "type": "Object"
            },
            "example": [
                "\n<div><code>\nfunction preload(){\n  sound = loadSound('assets/Damscray_DancingTiger.mp3');\n}\n\nfunction setup(){\n  cnv = createCanvas(100,100);\n  sound.amp(0);\n  sound.loop();\n  fft = new p5.FFT();\n}\n\nfunction draw(){\n  background(0);\n\n  var spectrum = fft.analyze(); \n  noStroke();\n  fill(0,255,0); // spectrum is green\n  for (var i = 0; i< spectrum.length; i++){\n    var x = map(i, 0, spectrum.length, 0, width);\n    var h = -height + map(spectrum[i], 0, 255, height, 0);\n    rect(x, height, width / spectrum.length, h )\n  }\n\n  var waveform = fft.waveform();\n  noFill();\n  beginShape();\n  stroke(255,0,0); // waveform is red\n  strokeWeight(1);\n  for (var i = 0; i< waveform.length; i++){\n    var x = map(i, 0, waveform.length, 0, width);\n    var y = map( waveform[i], 0, 255, 0, height);\n    vertex(x,y);\n  }\n  endShape();\n\n  isMouseOverCanvas();\n}\n\n// fade sound if mouse is over canvas\nfunction isMouseOverCanvas() {\n  var mX = mouseX, mY = mouseY;\n  if (mX > 0 && mX < width && mY < height && mY > 0) {\n      sound.amp(0.5, 0.2);\n  } else {\n    sound.amp(0, 0.2);\n  }\n}\n</code></div>"
            ]
        },
        "p5.Filter": {
            "name": "p5.Filter",
            "shortname": "p5.Filter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "p5.sound",
            "file": "src\\filter.js",
            "line": 6,
            "description": "A p5.Filter uses a Web Audio Biquad Filter to filter\nthe frequency response of an input source. Inheriting\nclasses include:<br/>\n* <code>p5.LowPass</code> - allows frequencies below\nthe cutoff frequency to pass through, and attenuates\nfrequencies above the cutoff.<br/>\n* <code>p5.HighPass</code> - the opposite of a lowpass\nfilter. <br/>\n* <code>p5.BandPass</code> -  allows a range of\nfrequencies to pass through and attenuates the frequencies\nbelow and above this frequency range.<br/>\n\nThe <code>.res()</code> method controls either width of the\nbandpass, or resonance of the low/highpass cutoff frequency.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "type",
                    "description": "'lowpass' (default), 'highpass', 'bandpass'",
                    "type": "[String]"
                }
            ],
            "return": {
                "description": "p5.Filter",
                "type": "Object"
            },
            "example": [
                "\n<div><code>\nvar fft, noise, filter;\n\nfunction setup() {\n  fill(255, 40, 255);\n\n  filter = new p5.BandPass();\n\n  noise = new p5.Noise();\n  // disconnect unfiltered noise,\n  // and connect to filter\n  noise.disconnect();\n  noise.connect(filter);\n  noise.start();\n\n  fft = new p5.FFT();\n}\n\nfunction draw() {\n  background(30);\n\n  // set the BandPass frequency based on mouseX\n  var freq = map(mouseX, 0, width, 20, 10000);\n  filter.freq(freq);\n  // give the filter a narrow band (lower res = wider bandpass)\n  filter.res(50);\n\n  // draw filtered spectrum\n  var spectrum = fft.analyze();\n  noStroke();\n  for (var i = 0; i < spectrum.length; i++) {\n    var x = map(i, 0, spectrum.length, 0, width);\n    var h = -height + map(spectrum[i], 0, 255, height, 0);\n    rect(x, height, width/spectrum.length, h);\n  }\n  \n  isMouseOverCanvas();\n}\n\nfunction isMouseOverCanvas() {\n  var mX = mouseX, mY = mouseY;\n  if (mX > 0 && mX < width && mY < height && mY > 0) {\n    noise.amp(0.5, 0.2);\n  } else {\n    noise.amp(0, 0.2);\n  }\n}\n</code></div>"
            ]
        },
        "p5.Phrase": {
            "name": "p5.Phrase",
            "shortname": "p5.Phrase",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "p5.sound",
            "file": "src\\looper.js",
            "line": 22,
            "description": "<p>A phrase is a pattern of musical events over time, i.e.\na series of notes and rests.</p>\n\n<p>Phrases must be added to a p5.Part for playback, and\neach part can play multiple phrases at the same time.\nFor example, one Phrase might be a kick drum, another\ncould be a snare, and another could be the bassline.</p>\n\n<p>The first parameter is a name so that the phrase can be\nmodified or deleted later. The callback is a a function that\nthis phrase will call at every step—for example it might be\ncalled <code>playNote(value){}</code>. The array determines\nwhich value is passed into the callback at each step of the\nphrase. It can be numbers, an object with multiple numbers,\nor a zero (0) indicates a rest so the callback won't be called).</p>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "Name so that you can access the Phrase.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The name of a function that this phrase\n                           will call. Typically it will play a sound,\n                           and accept two parameters: a value from the\n                           sequence array, followed by a time at which\n                           to play the sound.",
                    "type": "Function"
                },
                {
                    "name": "sequence",
                    "description": "Array of values to pass into the callback\n                          at each step of the phrase.",
                    "type": "Array"
                }
            ],
            "example": [
                "\n<div><code>\nvar mySound;\nvar pattern = [1,0,0,2,0,2,0,0];\n\nfunction preload() {\n  mySound = loadSound('assets/beatbox.mp3');\n}\n\nfunction setup() {\n  var myPhrase = new p5.Phrase('bbox', makeSound, pattern);\n  var myPart = new p5.Part();\n  myPart.addPhrase(myPhrase);\n  myPart.setBPM(60);\n  myPart.start();\n}\n\nfunction makeSound(time, playbackRate) {\n  mySound.rate(playbackRate);\n  mySound.play(time);\n}\n</code></div>"
            ]
        },
        "p5.Part": {
            "name": "p5.Part",
            "shortname": "p5.Part",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "p5.sound",
            "file": "src\\looper.js",
            "line": 89,
            "description": "A p5.Part plays back one or more p5.Phrases. Instantiate a part\nwith steps and tatums. By default, each step represents 1/16th note.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "steps",
                    "description": "Steps in the part",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "tatums",
                    "description": "Divisions of a beat (default is 1/16, a quarter note)",
                    "type": "Number",
                    "optional": true
                }
            ],
            "example": [
                "\n<div><code>\nvar box, drum;\nvar boxPat = [1,0,0,2,0,2,0,0];\nvar drumPat = [0,1,1,0,2,0,1,0];\n\nfunction preload() {\n  box = loadSound('assets/beatbox.mp3');\n  drum = loadSound('assets/drum.mp3');\n}\n\nfunction setup() {\n  var boxPhrase = new p5.Phrase('box', playBox, boxPat);\n  var drumPhrase = new p5.Phrase('drum', playDrum, drumPat);\n  var myPart = new p5.Part();\n  myPart.addPhrase(boxPhrase);\n  myPart.addPhrase(drumPhrase);\n  myPart.setBPM(60);\n  myPart.start();\n}\n\nfunction playBox(playbackRate, time) {\n  box.rate(playbackRate);\n  box.play(time);\n}\n\nfunction playDrum(playbackRate, time) {\n  drum.rate(playbackRate);\n  drum.play(time);\n}\n</code></div>"
            ]
        },
        "p5.Score": {
            "name": "p5.Score",
            "shortname": "p5.Score",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "p5.sound",
            "file": "src\\looper.js",
            "line": 347,
            "description": "A Score consists of a series of Parts. The parts will\nbe played back in order. For example, you could have an\nA part, a B part, and a C part, and play them back in this order\n<code>new p5.Score(a, a, b, a, c)</code>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "part(s)",
                    "description": "Parts to add to the score.",
                    "type": "p5.Part"
                }
            ],
            "example": [
                "\n<div><code>\nvar box, drum;\nvar boxPat = [1,0,0,2,0,2,0,0];\nvar drumPat = [0,1,1,0,2,0,1,0];\nvar osc, env;\n\nfunction preload() {\n  box = loadSound('assets/beatbox.mp3');\n  drum = loadSound('assets/drum.mp3');\n}\n\nfunction setup() {\n  var myPart = new p5.Part();\n  myPart.addPhrase('box', playBox, boxPat);\n  myPart.addPhrase('drum', playDrum, drumPat);\n  myPart.setBPM(60);\n  myPart.start();\n\n  osc = new p5.Oscillator();\n  env = new p5.Env(0.01, 1, 0.2, 0);\n}\n\nfunction playBox(playbackRate, time) {\n  box.rate(playbackRate);\n  box.play(time);\n}\n\nfunction playDrum(playbackRate, time) {\n  drum.rate(playbackRate)\n  drum.play(time);\n}\n</code></div>"
            ]
        },
        "p5.Noise": {
            "name": "p5.Noise",
            "shortname": "p5.Noise",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "p5.sound",
            "file": "src\\noise.js",
            "line": 6,
            "description": "Noise is a type of oscillator that generates a buffer with random values.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "type",
                    "description": "Type of noise can be 'white' (default),\n                     'brown' or 'pink'.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Noise Object",
                "type": "Object"
            }
        },
        "p5.OnsetDetect": {
            "name": "p5.OnsetDetect",
            "shortname": "p5.OnsetDetect",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "p5.sound",
            "file": "src\\onsetDetect.js",
            "line": 6,
            "description": "Listen for onsets (a sharp increase in volume) within a given\nfrequency range.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "freqLow",
                    "description": "Low frequency",
                    "type": "Number"
                },
                {
                    "name": "freqHigh",
                    "description": "High frequency",
                    "type": "Number"
                },
                {
                    "name": "threshold",
                    "description": "Amplitude threshold between 0 (no energy) and 1 (maximum)",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "Function to call when an onset is detected",
                    "type": "Function"
                }
            ]
        },
        "p5.Oscillator": {
            "name": "p5.Oscillator",
            "shortname": "p5.Oscillator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "p5.sound",
            "file": "src\\oscillator.js",
            "line": 10,
            "description": "<p>Creates a signal that oscillates between -1.0 and 1.0.\nBy default, the oscillation takes the form of a sinusoidal\nshape ('sine'). Additional types include 'triangle',\n'sawtooth' and 'square'. The frequency defaults to\n440 oscillations per second (440Hz, equal to the pitch of an\n'A' note).</p> \n\n<p>Set the type of oscillation with setType(), or by creating a\nspecific oscillator.</p> For example:\n<code>new p5.SinOsc(freq)</code>\n<code>new p5.TriOsc(freq)</code>\n<code>new p5.SqrOsc(freq)</code>\n<code>new p5.SawOsc(freq)</code>.\n</p>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "freq",
                    "description": "frequency defaults to 440Hz",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "type",
                    "description": "type of oscillator. Options:\n                       'sine' (default), 'triangle',\n                       'sawtooth', 'square'",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Oscillator object",
                "type": "Object"
            }
        },
        "p5.PeakDetect": {
            "name": "p5.PeakDetect",
            "shortname": "p5.PeakDetect",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "p5.sound",
            "file": "src\\peakDetect.js",
            "line": 6,
            "description": "<p>PeakDetect works in conjunction with p5.FFT to\nlook for onsets in some or all of the frequency spectrum.\n</p>\n<p>\nTo use p5.PeakDetect, call <code>update</code> in the draw loop\nand pass in a p5.FFT object.\n</p>\n<p>\nYou can listen for a specific part of the frequency spectrum by\nsetting the range between <code>freq1</code> and <code>freq2</code>.\n</p>\n\n<p><code>threshold</code> is the threshold for detecting a peak,\nscaled between 0 and 1. It is logarithmic, so 0.1 is half as loud\nas 1.0.</p>\n\n<p>\nThe update method is meant to be run in the draw loop, and\n<b>frames</b> determines how many loops must pass before\nanother peak can be detected.\nFor example, if the frameRate() = 60, you could detect the beat of a\n120 beat-per-minute song with this equation:\n<code> framesPerPeak = 60 / (estimatedBPM / 60 );</code>\n</p>\n\n<p>\nBased on example contribtued by @b2renger, and a simple beat detection\nexplanation by <a\nhref=\"http://www.airtightinteractive.com/2013/10/making-audio-reactive-visuals/\"\ntarget=\"_blank\">Felix Turner</a>.\n</p>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "freq1",
                    "description": "lowFrequency - defaults to 20Hz",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "freq2",
                    "description": "highFrequency - defaults to 20000 Hz",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "threshold",
                    "description": "Threshold for detecting a beat between 0 and 1\n                          scaled logarithmically where 0.1 is 1/2 the loudness\n                          of 1.0. Defaults to 0.25.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "framesPerPeak",
                    "description": "Defaults to 5.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "example": [
                "\n<div><code>\n\nvar cnv, soundFile, fft, peakDetect;\nvar ellipseWidth = 10;\n\nfunction setup() {\n  background(0);\n  noStroke();\n  fill(255);\n  textAlign(CENTER);\n\n  soundFile = loadSound('assets/beat.mp3');\n\n  // p5.PeakDetect requires a p5.FFT\n  fft = new p5.FFT();\n  peakDetect = new p5.PeakDetect();\n\n}\n\nfunction draw() {\n  background(0);\n  text('click to play/pause', width/2, height/2);\n\n  // peakDetect accepts an fft post-analysis\n  fft.analyze();\n  peakDetect.update(fft);\n\n  if ( peakDetect.isDetected ) {\n    ellipseWidth = 50;\n  } else {\n    ellipseWidth *= 0.95;\n  }\n\n  ellipse(width/2, height/2, ellipseWidth, ellipseWidth);\n}\n\n// toggle play/stop when canvas is clicked\nfunction mouseClicked() {\n  if (mouseX > 0 && mouseX < width && mouseY > 0 && mouseY < height) {\n    if (soundFile.isPlaying() ) {\n      soundFile.stop();\n    } else {\n      soundFile.play();\n    }\n  }\n}\n</code></div>"
            ]
        },
        "p5.Pulse": {
            "name": "p5.Pulse",
            "shortname": "p5.Pulse",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "p5.sound",
            "file": "src\\pulse.js",
            "line": 7,
            "description": "Creates a Pulse object, an oscillator that implements\nPulse Width Modulation.\nThe pulse is created with two oscillators.\nAccepts a parameter for frequency, and to set the\nwidth between the pulses. See <a href=\"\nhttp://p5js.org/reference/#/p5.Oscillator\">\n<code>p5.Oscillator</code> for a full list of methods.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "freq",
                    "description": "Frequency in oscillations per second (Hz)",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "w",
                    "description": "Width between the pulses (0 to 1.0,\n                       defaults to 0)",
                    "type": "Number",
                    "optional": true
                }
            ],
            "example": [
                "\n<div><code>\nvar pulse;\nfunction setup() {\n  background(0);\n  \n  // Create and start the pulse wave oscillator\n  pulse = new p5.Pulse();\n  pulse.amp(0.5);\n  pulse.freq(220);\n  pulse.start();\n}\n\nfunction draw() {\n  var w = map(mouseX, 0, width, 0, 1);\n  w = constrain(w, 0, 1);\n  pulse.width(w)\n}\n</code></div>"
            ]
        },
        "p5.Reverb": {
            "name": "p5.Reverb",
            "shortname": "p5.Reverb",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "p5.sound",
            "file": "src\\reverb.js",
            "line": 7,
            "description": "Reverb adds depth to a sound through a large number of decaying\nechoes. It creates the perception that sound is occurring in a\nphysical space. The p5.Reverb has paramters for Time (how long does the\nreverb last) and decayRate (how much the sound decays with each echo)\nthat can be set with the .set() or .process() methods. The p5.Convolver\nextends p5.Reverb allowing you to recreate the sound of actual physical\nspaces through convolution.",
            "is_constructor": 1,
            "example": [
                "\n<div><code>\nvar soundFile, reverb;\nfunction preload() {\n  soundFile = loadSound('assets/Damscray_DancingTiger.mp3');\n}\n\nfunction setup() {\n  reverb = new p5.Reverb();\n  soundFile.disconnect(); // so we'll only hear reverb...\n\n  // connect soundFile to reverb, process w/\n  // 3 second reverbTime, decayRate of 2%\n  reverb.process(soundFile, 3, 2);\n  soundFile.play();\n}\n</code></div>"
            ]
        },
        "p5.Convolver": {
            "name": "p5.Convolver",
            "shortname": "p5.Convolver",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "p5.sound",
            "file": "src\\reverb.js",
            "line": 198,
            "description": "<p>p5.Convolver extends p5.Reverb. It can emulate the sound of real\nphysical spaces through a process called <a href=\"\nhttps://en.wikipedia.org/wiki/Convolution_reverb#Real_space_simulation\">\nconvolution</a>.</p>\n\n<p>Convolution multiplies any audio input by an \"impulse response\"\nto simulate the dispersion of sound over time. The impulse response is\ngenerated from an audio file that you provide. One way to\ngenerate an impulse response is to pop a balloon in a reverberant space\nand record the echo. Convolution can also be used to experiment with\nsound.</p>\n\n<p>Use the method <code>createConvolution(path)</code> to instantiate a\np5.Convolver with a path to your impulse response audio file.</p>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "path",
                    "description": "path to a sound file",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "function (optional)",
                    "type": "[Function]"
                }
            ],
            "example": [
                "\n<div><code>\nvar cVerb, sound;\nfunction preload() {\n  // We have both MP3 and OGG versions of all sound assets\n  soundFormats('ogg', 'mp3');\n  \n  // Try replacing 'bx-spring' with other soundfiles like\n  // 'concrete-tunnel' 'small-plate' 'drum' 'beatbox'\n  cVerb = createConvolver('assets/bx-spring.mp3');\n\n  // Try replacing 'Damscray_DancingTiger' with\n  // 'beat', 'doorbell', lucky_dragons_-_power_melody'\n  sound = loadSound('assets/Damscray_DancingTiger.mp3');\n}\n\nfunction setup() {\n  // disconnect from master output...\n  sound.disconnect();\n  \n  // ...and process with cVerb\n  // so that we only hear the convolution\n  cVerb.process(sound);\n  \n  sound.play();\n}\n</code></div>"
            ]
        },
        "p5.Signal": {
            "name": "p5.Signal",
            "shortname": "p5.Signal",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "p5.sound",
            "file": "src\\signal.js",
            "line": 15,
            "description": "<p>p5.Signal is a constant audio-rate signal used by p5.Oscillator\nand p5.Envelope for modulation math.</p>\n\n<p>This is necessary because Web Audio is processed on a seprate clock.\nFor example, the p5 draw loop runs about 60 times per second. But\nthe audio clock must process samples 44100 times per second. If we\nwant to add a value to each of those samples, we can't do it in the\ndraw loop, but we can do it by adding a constant-rate audio signal.</p.\n\n<p>This class mostly functions behind the scenes in p5.sound, and returns\na Tone.Signal from the Tone.js library by Yotam Mann.\nIf you want to work directly with audio signals for modular\nsynthesis, check out\n<a href='http://bit.ly/1oIoEng' target=_'blank'>tone.js.</a></p>",
            "is_constructor": 1,
            "return": {
                "description": "A Signal object from the Tone.js library",
                "type": "Tone.Signal"
            },
            "example": [
                "\n<div><code>\nfunction setup() {\n  carrier = new p5.Oscillator('sine');\n  carrier.amp(1); // set amplitude\n  carrier.freq(220); // set frequency\n  carrier.start(); // start oscillating\n  \n  modulator = new p5.Oscillator('sawtooth');\n  modulator.disconnect();\n  modulator.amp(1);\n  modulator.freq(4);\n  modulator.start();\n\n  // Modulator's default amplitude range is -1 to 1.\n  // Multiply it by -200, so the range is -200 to 200\n  // then add 220 so the range is 20 to 420\n  carrier.freq( modulator.mult(-200).add(220) );\n}\n</code></div>"
            ]
        },
        "p5.sound": {
            "name": "p5.sound",
            "shortname": "p5.sound",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "p5.sound",
            "submodule": "p5.sound",
            "namespace": ""
        },
        "p5.SoundRecorder": {
            "name": "p5.SoundRecorder",
            "shortname": "p5.SoundRecorder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "p5.sound",
            "namespace": "",
            "file": "src\\soundRecorder.js",
            "line": 10,
            "description": "<p>Record sounds for playback and/or to save as a .wav file.\nThe p5.SoundRecorder records all sound output from your sketch,\nor can be assigned a specific source with setInput().</p>\n<p>The record() method accepts a p5.SoundFile as a parameter.\nWhen playback is stopped (either after the given amount of time,\nor with the stop() method), the p5.SoundRecorder will send its\nrecording to that p5.SoundFile for playback.</p>",
            "is_constructor": 1,
            "example": [
                "\n<div><code>\nvar mic, recorder, soundFile;\nvar state = 0;\n\nfunction setup() {\n  background(200);\n  // create an audio in\n  mic = new p5.AudioIn();\n  \n  // prompts user to enable their browser mic\n  mic.start();\n  \n  // create a sound recorder\n  recorder = new p5.SoundRecorder();\n  \n  // connect the mic to the recorder\n  recorder.setInput(mic);\n  \n  // this sound file will be used to\n  // playback & save the recording\n  soundFile = new p5.SoundFile();\n\n  text('keyPress to record', 20, 20);\n}\n\nfunction keyPressed() {\n  // make sure user enabled the mic\n  if (state === 0 && mic.enabled) {\n  \n    // record to our p5.SoundFile\n    recorder.record(soundFile);\n    \n    background(255,0,0);\n    text('Recording!', 20, 20);\n    state++;\n  }\n  else if (state === 1) {\n    background(0,255,0);\n\n    // stop recorder and\n    // send result to soundFile\n    recorder.stop(); \n    \n    text('Stopped', 20, 20);\n    state++;\n  }\n  \n  else if (state === 2) {\n    soundFile.play(); // play the result!\n    save(soundFile, 'mySound.wav');\n    state++;\n  }\n}\n</div></code>"
            ]
        },
        "p5.SoundFile": {
            "name": "p5.SoundFile",
            "shortname": "p5.SoundFile",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "p5.sound",
            "namespace": "",
            "file": "src\\soundfile.js",
            "line": 9,
            "description": "<p>SoundFile object with a path to a file.</p>\n\n<p>The p5.SoundFile may not be available immediately because\nit loads the file information asynchronously.</p>\n \n<p>To do something with the sound as soon as it loads\npass the name of a function as the second parameter.</p>\n\n<p>Only one file path is required. However, audio file formats \n(i.e. mp3, ogg, wav and m4a/aac) are not supported by all\nweb browsers. If you want to ensure compatability, instead of a single\nfile path, you may include an Array of filepaths, and the browser will\nchoose a format that works.</p>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "path",
                    "description": "path to a sound file (String). Optionally,\n                             you may include multiple file formats in\n                             an array. Alternately, accepts an object\n                             from the HTML5 File API, or a p5.File.",
                    "type": "String/Array"
                },
                {
                    "name": "callback",
                    "description": "Name of a function to call once file loads",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "p5.SoundFile Object",
                "type": "Object"
            },
            "example": [
                " \n<div><code>\n\nfunction preload() {\n  mySound = loadSound('assets/doorbell.mp3');\n}\n\nfunction setup() {\n  mySound.setVolume(0.1);\n  mySound.play();\n}\n \n </code></div>"
            ]
        }
    },
    "classitems": [
        {
            "file": "src\\amplitude.js",
            "line": 88,
            "description": "Connects to the p5sound instance (master output) by default.\nOptionally, you can pass in a specific source (i.e. a soundfile).",
            "itemtype": "method",
            "name": "setInput",
            "params": [
                {
                    "name": "snd",
                    "description": "set the sound source\n                                     (optional, defaults to\n                                     master output)",
                    "type": "SoundObject|undefined",
                    "optional": true
                },
                {
                    "name": "smoothing",
                    "description": "a range between 0.0 and 1.0\n                                      to smooth amplitude readings",
                    "type": "Number|undefined",
                    "optional": true
                }
            ],
            "example": [
                "\n<div><code>\nfunction preload(){\n  sound1 = loadSound('assets/beat.mp3');\n  sound2 = loadSound('assets/drum.mp3');\n}\nfunction setup(){\n  amplitude = new p5.Amplitude();\n  sound1.play();\n  sound2.play();\n  amplitude.setInput(sound2);\n}\nfunction draw() {\n  background(0);\n  fill(255);\n  var level = amplitude.getLevel();\n  var size = map(level, 0, 1, 0, 200);\n  ellipse(width/2, height/2, size, size);\n}\nfunction mouseClicked(){\n  sound1.stop();\n  sound2.stop();\n}\n</code></div>"
            ],
            "class": "p5.Amplitude"
        },
        {
            "file": "src\\amplitude.js",
            "line": 220,
            "description": "Returns a single Amplitude reading at the moment it is called.\nFor continuous readings, run in the draw loop.",
            "itemtype": "property",
            "name": "[channel] Optionally return only channel 0 (left) or 1 (right)",
            "type": "Number",
            "return": {
                "description": "Amplitude as a number between 0.0 and 1.0",
                "type": "Number"
            },
            "example": [
                "\n<div><code>\nfunction preload(){\n  sound = loadSound('assets/beat.mp3');\n}\nfunction setup() { \n  amplitude = new p5.Amplitude();\n  sound.play();\n}\nfunction draw() {\n  background(0);\n  fill(255);\n  var level = amplitude.getLevel();\n  var size = map(level, 0, 1, 0, 200);\n  ellipse(width/2, height/2, size, size);\n}\nfunction mouseClicked(){\n  sound.stop();\n}\n</code></div>"
            ],
            "class": "p5.Amplitude"
        },
        {
            "file": "src\\amplitude.js",
            "line": 264,
            "description": "Determines whether the results of Amplitude.process() will be\nNormalized. To normalize, Amplitude finds the difference the\nloudest reading it has processed and the maximum amplitude of\n1.0. Amplitude adds this difference to all values to produce\nresults that will reliably map between 0.0 and 1.0. However,\nif a louder moment occurs, the amount that Normalize adds to\nall the values will change. Accepts an optional boolean parameter\n(true or false). Normalizing is off by default.",
            "itemtype": "method",
            "name": "toggleNormalize",
            "params": [
                {
                    "name": "boolean",
                    "description": "set normalize to true (1) or false (0)",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "p5.Amplitude"
        },
        {
            "file": "src\\amplitude.js",
            "line": 286,
            "description": "Smooth Amplitude analysis by averaging with the last analysis \nframe. Off by default.",
            "itemtype": "method",
            "name": "smooth",
            "params": [
                {
                    "name": "set",
                    "description": "smoothing from 0.0 <= 1",
                    "type": "Number"
                }
            ],
            "class": "p5.Amplitude"
        },
        {
            "file": "src\\audioin.js",
            "line": 47,
            "description": "Client must allow browser to access their microphone / audioin source.\nDefault: false. Will become true when the client enables acces.",
            "itemtype": "property",
            "name": "enabled",
            "type": "Boolean",
            "class": "p5.AudioIn"
        },
        {
            "file": "src\\audioin.js",
            "line": 73,
            "description": "Start processing audio input. This enables the use of other\nAudioIn methods like getLevel(). Note that by default, AudioIn\nis not connected to p5.sound's output. So you won't hear\nanything unless you use the connect() method.<br/>",
            "itemtype": "method",
            "name": "start",
            "class": "p5.AudioIn"
        },
        {
            "file": "src\\audioin.js",
            "line": 124,
            "description": "Turn the AudioIn off. If the AudioIn is stopped, it cannot getLevel().<br/>",
            "itemtype": "method",
            "name": "stop",
            "class": "p5.AudioIn"
        },
        {
            "file": "src\\audioin.js",
            "line": 135,
            "description": "Connect to an audio unit. If no parameter is provided, will\nconnect to the master output (i.e. your speakers).<br/>",
            "itemtype": "method",
            "name": "connect",
            "params": [
                {
                    "name": "unit",
                    "description": "An object that accepts audio input,\n                        such as an FFT",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "p5.AudioIn"
        },
        {
            "file": "src\\audioin.js",
            "line": 160,
            "description": "Disconnect the AudioIn from all audio units. For example, if\nconnect() had been called, disconnect() will stop sending \nsignal to your speakers.<br/>",
            "itemtype": "method",
            "name": "disconnect",
            "class": "p5.AudioIn"
        },
        {
            "file": "src\\audioin.js",
            "line": 173,
            "description": "Read the Amplitude (volume level) of an AudioIn. The AudioIn\nclass contains its own instance of the Amplitude class to help\nmake it easy to get a microphone's volume level. Accepts an\noptional smoothing value (0.0 < 1.0). <em>NOTE: AudioIn must\n.start() before using .getLevel().</em><br/>",
            "itemtype": "method",
            "name": "getLevel",
            "params": [
                {
                    "name": "smoothing",
                    "description": "Smoothing is 0.0 by default.\n                             Smooths values based on previous values.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "Volume level (between 0.0 and 1.0)",
                "type": "Number"
            },
            "class": "p5.AudioIn"
        },
        {
            "file": "src\\audioin.js",
            "line": 192,
            "description": "Add input sources to the list of available sources.",
            "access": "private",
            "tagname": "",
            "class": "p5.AudioIn"
        },
        {
            "file": "src\\audioin.js",
            "line": 207,
            "description": "Set amplitude (volume) of a mic input between 0 and 1.0. <br/>",
            "itemtype": "method",
            "name": "amp",
            "params": [
                {
                    "name": "vol",
                    "description": "between 0 and 1.0",
                    "type": "Number"
                },
                {
                    "name": "time",
                    "description": "ramp time (optional)",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5.AudioIn"
        },
        {
            "file": "src\\audioin.js",
            "line": 227,
            "description": "Returns a list of available input sources. Some browsers\ngive the client the option to set their own media source.\nOthers allow JavaScript to determine which source,\nand for this we have listSources() and setSource().<br/>",
            "itemtype": "method",
            "name": "listSources",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "p5.AudioIn"
        },
        {
            "file": "src\\audioin.js",
            "line": 246,
            "description": "Set the input source. Accepts a number representing a\nposition in the array returned by listSources().\nThis is only available in browsers that support \nMediaStreamTrack.getSources(). Instead, some browsers\ngive users the option to set their own media source.<br/>",
            "itemtype": "method",
            "name": "setSource",
            "params": [
                {
                    "name": "num",
                    "description": "position of input source in the array",
                    "type": "Number"
                }
            ],
            "class": "p5.AudioIn"
        },
        {
            "file": "src\\delay.js",
            "line": 66,
            "description": "The p5.Delay is built with two\n<a href=\"http://www.w3.org/TR/webaudio/#DelayNode\">\nWeb Audio Delay Nodes</a>, one for each stereo channel.",
            "itemtype": "property",
            "name": "leftDelay",
            "type": "{Object}  Web Audio Delay Node",
            "class": "p5.Delay"
        },
        {
            "file": "src\\delay.js",
            "line": 75,
            "description": "The p5.Delay is built with two\n<a href=\"http://www.w3.org/TR/webaudio/#DelayNode\">\nWeb Audio Delay Nodes</a>, one for each stereo channel.",
            "itemtype": "property",
            "name": "rightDelay",
            "type": "{Object}  Web Audio Delay Node",
            "class": "p5.Delay"
        },
        {
            "file": "src\\delay.js",
            "line": 90,
            "description": "Internal filter. Set to lowPass by default, but can be accessed directly.\nSee p5.Filter for methods. Or use the p5.Delay.filter() method to change\nfrequency and q.",
            "itemtype": "property",
            "name": "lowPass",
            "type": "{p5.Filter}",
            "class": "p5.Delay"
        },
        {
            "file": "src\\delay.js",
            "line": 123,
            "description": "Add delay to an audio signal according to a set\nof delay parameters.",
            "itemtype": "method",
            "name": "process",
            "params": [
                {
                    "name": "Signal",
                    "description": "An object that outputs audio",
                    "type": "Object"
                },
                {
                    "name": "delayTime",
                    "description": "Time (in seconds) of the delay/echo.\n                             Some browsers limit delayTime to\n                             1 second.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "feedback",
                    "description": "sends the delay back through itself\n                             in a loop that decreases in volume\n                             each time.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "lowPass",
                    "description": "Cutoff frequency. Only frequencies\n                             below the lowPass will be part of the\n                             delay.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5.Delay"
        },
        {
            "file": "src\\delay.js",
            "line": 161,
            "description": "Set the delay (echo) time, in seconds. Usually this value will be\na floating point number between 0.0 and 1.0.",
            "itemtype": "method",
            "name": "delayTime",
            "params": [
                {
                    "name": "delayTime",
                    "description": "Time (in seconds) of the delay",
                    "type": "Number"
                }
            ],
            "class": "p5.Delay"
        },
        {
            "file": "src\\delay.js",
            "line": 183,
            "description": "Feedback occurs when Delay sends its signal back through its input\nin a loop. The feedback amount determines how much signal to send each\ntime through the loop. A feedback greater than 1.0 is not desirable because\nit will increase the overall output each time through the loop,\ncreating an infinite feedback loop.",
            "itemtype": "method",
            "name": "feedback",
            "params": [
                {
                    "name": "feedback",
                    "description": "0.0 to 1.0, or an object such as an\n                                Oscillator that can be used to\n                                modulate this param",
                    "type": "Number|Object"
                }
            ],
            "class": "p5.Delay"
        },
        {
            "file": "src\\delay.js",
            "line": 210,
            "description": "Set a lowpass filter frequency for the delay. A lowpass filter\nwill cut off any frequencies higher than the filter frequency.",
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "cutoffFreq",
                    "description": "A lowpass filter will cut off any \n                            frequencies higher than the filter frequency.",
                    "type": "Number|Object"
                },
                {
                    "name": "res",
                    "description": "Resonance of the filter frequency\n                            cutoff, or an object (i.e. a p5.Oscillator)\n                            that can be used to modulate this parameter.\n                            High numbers (i.e. 15) will produce a resonance,\n                            low numbers (i.e. .2) will produce a slope.",
                    "type": "Number|Object"
                }
            ],
            "class": "p5.Delay"
        },
        {
            "file": "src\\delay.js",
            "line": 229,
            "description": "Choose a preset type of delay. 'pingPong' bounces the signal\nfrom the left to the right channel to produce a stereo effect.\nAny other parameter will revert to the default delay setting.",
            "itemtype": "method",
            "name": "setType",
            "params": [
                {
                    "name": "type",
                    "description": "'pingPong' (1) or 'default' (0)",
                    "type": "String|Number"
                }
            ],
            "class": "p5.Delay"
        },
        {
            "file": "src\\delay.js",
            "line": 262,
            "description": "Set the output level of the delay effect.",
            "itemtype": "method",
            "name": "amp",
            "params": [
                {
                    "name": "volume",
                    "description": "amplitude between 0 and 1.0",
                    "type": "Number"
                },
                {
                    "name": "rampTime",
                    "description": "create a fade that lasts rampTime",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "timeFromNow",
                    "description": "schedule this event to happen\n                              seconds from now",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5.Delay"
        },
        {
            "file": "src\\delay.js",
            "line": 281,
            "description": "Send output to a p5.sound or web audio object",
            "itemtype": "method",
            "name": "connect",
            "params": [
                {
                    "name": "unit",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "p5.Delay"
        },
        {
            "file": "src\\delay.js",
            "line": 292,
            "description": "Disconnect all output.",
            "itemtype": "method",
            "name": "disconnect",
            "class": "p5.Delay"
        },
        {
            "file": "src\\env.js",
            "line": 80,
            "itemtype": "property",
            "name": "attackTime",
            "class": "p5.Env"
        },
        {
            "file": "src\\env.js",
            "line": 84,
            "itemtype": "property",
            "name": "attackLevel",
            "class": "p5.Env"
        },
        {
            "file": "src\\env.js",
            "line": 88,
            "itemtype": "property",
            "name": "decayTime",
            "class": "p5.Env"
        },
        {
            "file": "src\\env.js",
            "line": 92,
            "itemtype": "property",
            "name": "decayLevel",
            "class": "p5.Env"
        },
        {
            "file": "src\\env.js",
            "line": 96,
            "itemtype": "property",
            "name": "sustainTime",
            "class": "p5.Env"
        },
        {
            "file": "src\\env.js",
            "line": 100,
            "itemtype": "property",
            "name": "sustainLevel",
            "class": "p5.Env"
        },
        {
            "file": "src\\env.js",
            "line": 104,
            "itemtype": "property",
            "name": "releaseTime",
            "class": "p5.Env"
        },
        {
            "file": "src\\env.js",
            "line": 108,
            "itemtype": "property",
            "name": "releaseLevel",
            "class": "p5.Env"
        },
        {
            "file": "src\\env.js",
            "line": 128,
            "description": "Reset the envelope with a series of time/value pairs.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "aTime",
                    "description": "Time (in seconds) before level\n                               reaches attackLevel",
                    "type": "Number"
                },
                {
                    "name": "aLevel",
                    "description": "Typically an amplitude between\n                               0.0 and 1.0",
                    "type": "Number"
                },
                {
                    "name": "dTime",
                    "description": "Time",
                    "type": "Number"
                },
                {
                    "name": "dLevel",
                    "description": "Amplitude (In a standard ADSR envelope,\n                               decayLevel = sustainLevel)",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "sTime",
                    "description": "Time (in seconds)",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "sLevel",
                    "description": "Amplitude 0.0 to 1.0",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "rTime",
                    "description": "Time (in seconds)",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "rLevel",
                    "description": "Amplitude 0.0 to 1.0",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5.Env"
        },
        {
            "file": "src\\env.js",
            "line": 155,
            "description": "Assign a parameter to be controlled by this envelope.\nIf a p5.Sound object is given, then the p5.Env will control its\noutput gain. If multiple inputs are provided, the env will\ncontrol all of them.",
            "itemtype": "method",
            "name": "setInput",
            "params": [
                {
                    "name": "unit",
                    "description": "A p5.sound object or\n                              Web Audio Param.",
                    "type": "Object"
                }
            ],
            "class": "p5.Env"
        },
        {
            "file": "src\\env.js",
            "line": 175,
            "description": "Play tells the envelope to start acting on a given input.\nIf the input is a p5.sound object (i.e. AudioIn, Oscillator,\nSoundFile), then Env will control its output volume.\nEnvelopes can also be used to control any <a href=\"\nhttp://docs.webplatform.org/wiki/apis/webaudio/AudioParam\">\nWeb Audio Audio Param.</a>",
            "itemtype": "method",
            "name": "play",
            "params": [
                {
                    "name": "unit",
                    "description": "A p5.sound object or\n                              Web Audio Param.",
                    "type": "Object"
                },
                {
                    "name": "secondsFromNow",
                    "description": "time from now (in seconds)",
                    "type": "Number"
                }
            ],
            "class": "p5.Env"
        },
        {
            "file": "src\\env.js",
            "line": 216,
            "description": "Trigger the Attack, Decay, and Sustain of the Envelope.\nSimilar to holding down a key on a piano, but it will\nhold the sustain level until you let go. Input can be\nany p5.sound object, or a <a href=\"\nhttp://docs.webplatform.org/wiki/apis/webaudio/AudioParam\">\nWeb Audio Param</a>.",
            "itemtype": "method",
            "name": "triggerAttack",
            "params": [
                {
                    "name": "unit",
                    "description": "p5.sound Object or Web Audio Param",
                    "type": "Object"
                },
                {
                    "name": "secondsFromNow",
                    "description": "time from now (in seconds)",
                    "type": "Number"
                }
            ],
            "class": "p5.Env"
        },
        {
            "file": "src\\env.js",
            "line": 258,
            "description": "Trigger the Release of the Envelope. This is similar to releasing\nthe key on a piano and letting the sound fade according to the\nrelease level and release time.",
            "itemtype": "method",
            "name": "triggerRelease",
            "params": [
                {
                    "name": "unit",
                    "description": "p5.sound Object or Web Audio Param",
                    "type": "Object"
                },
                {
                    "name": "secondsFromNow",
                    "description": "time to trigger the release",
                    "type": "Number"
                }
            ],
            "class": "p5.Env"
        },
        {
            "file": "src\\env.js",
            "line": 364,
            "description": "Add a value to the p5.Oscillator's output amplitude,\nand return the oscillator. Calling this method\nagain will override the initial add() with new values.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "number",
                    "description": "Constant number to add",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Envelope Returns this envelope\n                                   with scaled output",
                "type": "p5.Env"
            },
            "class": "p5.Env"
        },
        {
            "file": "src\\env.js",
            "line": 381,
            "description": "Multiply the p5.Env's output amplitude\nby a fixed value. Calling this method\nagain will override the initial mult() with new values.",
            "itemtype": "method",
            "name": "mult",
            "params": [
                {
                    "name": "number",
                    "description": "Constant number to multiply",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Envelope Returns this envelope\n                                   with scaled output",
                "type": "p5.Env"
            },
            "class": "p5.Env"
        },
        {
            "file": "src\\env.js",
            "line": 398,
            "description": "Scale this envelope's amplitude values to a given\nrange, and return the envelope. Calling this method\nagain will override the initial scale() with new values.",
            "itemtype": "method",
            "name": "scale",
            "params": [
                {
                    "name": "inMin",
                    "description": "input range minumum",
                    "type": "Number"
                },
                {
                    "name": "inMax",
                    "description": "input range maximum",
                    "type": "Number"
                },
                {
                    "name": "outMin",
                    "description": "input range minumum",
                    "type": "Number"
                },
                {
                    "name": "outMax",
                    "description": "input range maximum",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Envelope Returns this envelope\n                                   with scaled output",
                "type": "p5.Env"
            },
            "class": "p5.Env"
        },
        {
            "file": "src\\fft.js",
            "line": 120,
            "description": "Set the input source for the FFT analysis. If no source is\nprovided, FFT will analyze all sound in the sketch.",
            "itemtype": "method",
            "name": "setInput",
            "params": [
                {
                    "name": "source",
                    "description": "p5.sound object (or web audio API source node)",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "bins",
                    "description": "Must be a power of two between 16 and 1024",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5.FFT"
        },
        {
            "file": "src\\fft.js",
            "line": 139,
            "description": "Returns an array of amplitude values (between 0-255) that represent\na snapshot of amplitude readings in a single buffer. Length will be\nequal to bins (defaults to 1024). Can be used to draw the waveform\nof a sound.",
            "itemtype": "method",
            "name": "waveform",
            "params": [
                {
                    "name": "bins",
                    "description": "Must be a power of two between\n                          16 and 1024. Defaults to 1024.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "Array    Array of amplitude values (0-255)\n                          over time. Array length = bins.",
                "type": "Array"
            },
            "class": "p5.FFT"
        },
        {
            "file": "src\\fft.js",
            "line": 163,
            "description": "Returns an array of amplitude values (between 0 and 255)\nacross the frequency spectrum. Length is equal to FFT bins\n(1024 by default). The array indices correspond to frequencies\n(i.e. pitches), from the lowest to the highest that humans can\nhear. Each value represents amplitude at that slice of the\nfrequency spectrum. Must be called prior to using\n<code>getEnergy()</code>.",
            "itemtype": "method",
            "name": "analyze",
            "params": [
                {
                    "name": "bins",
                    "description": "Must be a power of two between\n                           16 and 1024. Defaults to 1024.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "spectrum    Array of energy (amplitude/volume)\n                            values across the frequency spectrum.\n                            Lowest energy (silence) = 0, highest\n                            possible is 255.",
                "type": "Array"
            },
            "example": [
                "\n<div><code>\nvar osc;\nvar fft;\n\nfunction setup(){\n  createCanvas(100,100);\n  osc = new p5.Oscillator();\n  osc.amp(0);\n  osc.start();\n  fft = new p5.FFT();\n}\n\nfunction draw(){\n  background(0);\n\n  var freq = map(mouseX, 0, 800, 20, 15000);\n  freq = constrain(freq, 1, 20000);\n  osc.freq(freq);\n\n  var spectrum = fft.analyze(); \n  noStroke();\n  fill(0,255,0); // spectrum is green\n  for (var i = 0; i< spectrum.length; i++){\n    var x = map(i, 0, spectrum.length, 0, width);\n    var h = -height + map(spectrum[i], 0, 255, height, 0);\n    rect(x, height, width / spectrum.length, h );\n  }\n\n  stroke(255);\n  text('Freq: ' + round(freq)+'Hz', 10, 10); \n\n  isMouseOverCanvas();\n}\n\n// only play sound when mouse is over canvas\nfunction isMouseOverCanvas() {\n  var mX = mouseX, mY = mouseY;\n  if (mX > 0 && mX < width && mY < height && mY > 0) {\n    osc.amp(0.5, 0.2);\n  } else {\n    osc.amp(0, 0.2);\n  }\n}\n</code></div>\n                                 \n"
            ],
            "class": "p5.FFT"
        },
        {
            "file": "src\\fft.js",
            "line": 238,
            "description": "Returns the amount of energy (volume) at a specific\n<a href=\"en.wikipedia.org/wiki/Audio_frequency\" target=\"_blank\">\nfrequency</a>, or the average amount of energy between two\nfrequencies. Accepts Number(s) corresponding\nto frequency (in Hz), or a String corresponding to predefined\nfrequency ranges (\"bass\", \"lowMid\", \"mid\", \"highMid\", \"treble\").\nReturns a range between 0 (no energy/volume at that frequency) and\n255 (maximum energy). \n<em>NOTE: analyze() must be called prior to getEnergy(). Analyze()\ntells the FFT to analyze frequency data, and getEnergy() uses\nthe results determine the value at a specific frequency or\nrange of frequencies.</em></p>",
            "itemtype": "method",
            "name": "getEnergy",
            "params": [
                {
                    "name": "frequency1",
                    "description": "Will return a value representing\n                              energy at this frequency. Alternately,\n                              the strings \"bass\", \"lowMid\" \"mid\",\n                              \"highMid\", and \"treble\" will return\n                              predefined frequency ranges.",
                    "type": "Number|String"
                },
                {
                    "name": "frequency2",
                    "description": "If a second frequency is given,\n                              will return average amount of\n                              energy that exists between the\n                              two frequencies.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "Energy   Energy (volume/amplitude) from\n                            0 and 255.",
                "type": "Number"
            },
            "class": "p5.FFT"
        },
        {
            "file": "src\\fft.js",
            "line": 329,
            "description": "Smooth FFT analysis by averaging with the last analysis frame.",
            "itemtype": "method",
            "name": "smooth",
            "params": [
                {
                    "name": "smoothing",
                    "description": "0.0 < smoothing < 1.0.\n                             Defaults to 0.8.",
                    "type": "Number"
                }
            ],
            "class": "p5.FFT"
        },
        {
            "file": "src\\filter.js",
            "line": 82,
            "description": "The p5.Filter is built with a\n<a href=\"http://www.w3.org/TR/webaudio/#BiquadFilterNode\">\nWeb Audio BiquadFilter Node</a>.",
            "itemtype": "property",
            "name": "biquadFilter",
            "type": "{Object}  Web Audio Delay Node",
            "class": "p5.Filter"
        },
        {
            "file": "src\\filter.js",
            "line": 101,
            "description": "Filter an audio signal according to a set\nof filter parameters.",
            "itemtype": "method",
            "name": "process",
            "params": [
                {
                    "name": "Signal",
                    "description": "An object that outputs audio",
                    "type": "Object"
                },
                {
                    "name": "freq",
                    "description": "Frequency in Hz, from 10 to 22050",
                    "type": "[Number]"
                },
                {
                    "name": "res",
                    "description": "Resonance/Width of the filter frequency\n                      from 0.001 to 1000",
                    "type": "[Number]"
                }
            ],
            "class": "p5.Filter"
        },
        {
            "file": "src\\filter.js",
            "line": 116,
            "description": "Set the frequency and the resonance of the filter.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "freq",
                    "description": "Frequency in Hz, from 10 to 22050",
                    "type": "Number"
                },
                {
                    "name": "res",
                    "description": "Resonance (Q) from 0.001 to 1000",
                    "type": "Number"
                },
                {
                    "name": "timeFromNow",
                    "description": "schedule this event to happen\n                              seconds from now",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5.Filter"
        },
        {
            "file": "src\\filter.js",
            "line": 134,
            "description": "Set the filter frequency, in Hz, from 10 to 22050 (the range of\nhuman hearing, although in reality most people hear in a narrower\nrange).",
            "itemtype": "method",
            "name": "freq",
            "params": [
                {
                    "name": "freq",
                    "description": "Filter Frequency",
                    "type": "Number"
                },
                {
                    "name": "timeFromNow",
                    "description": "schedule this event to happen\n                              seconds from now",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "value  Returns the current frequency value",
                "type": "Number"
            },
            "class": "p5.Filter"
        },
        {
            "file": "src\\filter.js",
            "line": 161,
            "description": "Controls either width of a bandpass frequency,\nor the resonance of a low/highpass cutoff frequency.",
            "itemtype": "method",
            "name": "res",
            "params": [
                {
                    "name": "res",
                    "description": "Resonance/Width of filter freq\n                     from 0.001 to 1000",
                    "type": "Number"
                },
                {
                    "name": "timeFromNow",
                    "description": "schedule this event to happen\n                              seconds from now",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "value Returns the current res value",
                "type": "Number"
            },
            "class": "p5.Filter"
        },
        {
            "file": "src\\filter.js",
            "line": 185,
            "description": "Set the type of a p5.Filter. Possible types include: \n\"lowpass\" (default), \"highpass\", \"bandpass\", \n\"lowshelf\", \"highshelf\", \"peaking\", \"notch\",\n\"allpass\".",
            "itemtype": "method",
            "name": "setType",
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "p5.Filter"
        },
        {
            "file": "src\\filter.js",
            "line": 198,
            "description": "Set the output level of the filter.",
            "itemtype": "method",
            "name": "amp",
            "params": [
                {
                    "name": "volume",
                    "description": "amplitude between 0 and 1.0",
                    "type": "Number"
                },
                {
                    "name": "rampTime",
                    "description": "create a fade that lasts rampTime",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "timeFromNow",
                    "description": "schedule this event to happen\n                              seconds from now",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5.Filter"
        },
        {
            "file": "src\\filter.js",
            "line": 217,
            "description": "Send output to a p5.sound or web audio object",
            "itemtype": "method",
            "name": "connect",
            "params": [
                {
                    "name": "unit",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "p5.Filter"
        },
        {
            "file": "src\\filter.js",
            "line": 228,
            "description": "Disconnect all output.",
            "itemtype": "method",
            "name": "disconnect",
            "class": "p5.Filter"
        },
        {
            "file": "src\\filter.js",
            "line": 237,
            "description": "Constructor: <code>new p5.LowPass()</code> Filter.\nThis is the same as creating a p5.Filter and then calling\nits method <code>setType('lowpass')</code>.\nSee p5.Filter for methods.",
            "itemtype": "method",
            "name": "p5.LowPass",
            "class": "p5.Filter"
        },
        {
            "file": "src\\filter.js",
            "line": 250,
            "description": "Constructor: <code>new p5.HighPass()</code> Filter.\nThis is the same as creating a p5.Filter and then calling\nits method <code>setType('highpass')</code>.\nSee p5.Filter for methods.",
            "itemtype": "method",
            "name": "p5.HighPass",
            "class": "p5.Filter"
        },
        {
            "file": "src\\filter.js",
            "line": 263,
            "description": "Constructor: <code>new p5.BandPass()</code> Filter.\nThis is the same as creating a p5.Filter and then calling\nits method <code>setType('bandpass')</code>.\nSee p5.Filter for methods.",
            "itemtype": "method",
            "name": "p5.BandPass",
            "class": "p5.Filter"
        },
        {
            "file": "src\\helpers.js",
            "line": 13,
            "description": "Returns a number representing the sample rate, in samples per second,\nof all sound objects in this audio context. It is determined by the\nsampling rate of your operating system's sound card, and it is not\ncurrently possile to change.\nIt is often 44100, or twice the range of human hearing.",
            "itemtype": "method",
            "name": "sampleRate",
            "return": {
                "description": "samplerate samples per second",
                "type": "Number"
            },
            "class": "p5.Phrase"
        },
        {
            "file": "src\\helpers.js",
            "line": 28,
            "description": "Returns the closest MIDI note value for\na given frequency.",
            "params": [
                {
                    "name": "frequency",
                    "description": "A freqeuncy, for example, the \"A\"\n                           above Middle C is 440Hz",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "MIDI note value",
                "type": "Number"
            },
            "class": "p5.Phrase"
        },
        {
            "file": "src\\helpers.js",
            "line": 42,
            "description": "Returns the frequency value of a MIDI note value.\nGeneral MIDI treats notes as integers where middle C\nis 60, C# is 61, D is 62 etc. Useful for generating\nmusical frequencies with oscillators.",
            "itemtype": "method",
            "name": "midiToFreq",
            "params": [
                {
                    "name": "midiNote",
                    "description": "The number of a MIDI note",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Frequency value of the given MIDI note",
                "type": "Number"
            },
            "example": [
                "\n<div><code>\nvar notes = [60, 64, 67, 72];\nvar i = 0;\n\nfunction setup() {\n  osc = new p5.Oscillator('Triangle');\n  osc.start();\n  frameRate(1);\n}\n\nfunction draw() {\n  var freq = midiToFreq(notes[i]);\n  osc.freq(freq);\n  i++;\n  if (i >= notes.length){\n    i = 0;\n  }\n}\n</code></div>"
            ],
            "class": "p5.Phrase"
        },
        {
            "file": "src\\helpers.js",
            "line": 76,
            "description": "List the SoundFile formats that you will include. LoadSound \nwill search your directory for these extensions, and will pick\na format that is compatable with the client's web browser.\n<a href=\"http://media.io/\">Here</a> is a free online file\nconverter.",
            "itemtype": "method",
            "name": "soundFormats",
            "params": [
                {
                    "name": "formats",
                    "description": "i.e. 'mp3', 'wav', 'ogg'",
                    "type": "String|Strings"
                }
            ],
            "example": [
                "\n<div><code>\nfunction preload() {\n  // set the global sound formats\n  soundFormats('mp3', 'ogg');\n  \n  // load either beatbox.mp3, or .ogg, depending on browser\n  mySound = loadSound('../sounds/beatbox.mp3');\n}\n\nfunction setup() {\n  mySound.play();\n}\n</code></div>"
            ],
            "class": "p5.Phrase"
        },
        {
            "file": "src\\helpers.js",
            "line": 188,
            "description": "Used by Osc and Env to chain signal math",
            "class": "p5.Phrase"
        },
        {
            "file": "src\\looper.js",
            "line": 8,
            "description": "Set the global tempo, in beats per minute, for all\np5.Parts. This method will impact all active p5.Parts.",
            "params": [
                {
                    "name": "BPM",
                    "description": "Beats Per Minute",
                    "type": "Number"
                },
                {
                    "name": "rampTime",
                    "description": "Seconds from now",
                    "type": "Number"
                }
            ],
            "class": "p5.Phrase"
        },
        {
            "file": "src\\looper.js",
            "line": 76,
            "description": "Array of values to pass into the callback\nat each step of the phrase. Depending on the callback\nfunction's requirements, these values may be numbers,\nstrings, or an object with multiple parameters.\nZero (0) indicates a rest.",
            "itemtype": "property",
            "name": "sequence",
            "type": "{Array}",
            "class": "p5.Phrase"
        },
        {
            "file": "src\\looper.js",
            "line": 152,
            "description": "Set the tempo of this part, in Beats Per Minute.",
            "itemtype": "method",
            "name": "setBPM",
            "params": [
                {
                    "name": "BPM",
                    "description": "Beats Per Minute",
                    "type": "Number"
                },
                {
                    "name": "rampTime",
                    "description": "Seconds from now",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5.Part"
        },
        {
            "file": "src\\looper.js",
            "line": 163,
            "description": "Returns the Beats Per Minute of this currently part.",
            "itemtype": "method",
            "name": "getBPM",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "p5.Part"
        },
        {
            "file": "src\\looper.js",
            "line": 173,
            "description": "Start playback of this part. It will play\nthrough all of its phrases at a speed\ndetermined by setBPM.",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "time",
                    "description": "seconds from now",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5.Part"
        },
        {
            "file": "src\\looper.js",
            "line": 190,
            "description": "Loop playback of this part. It will begin\nlooping through all of its phrases at a speed\ndetermined by setBPM.",
            "itemtype": "method",
            "name": "loop",
            "params": [
                {
                    "name": "time",
                    "description": "seconds from now",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5.Part"
        },
        {
            "file": "src\\looper.js",
            "line": 209,
            "description": "Tell the part to stop looping.",
            "itemtype": "method",
            "name": "noLoop",
            "class": "p5.Part"
        },
        {
            "file": "src\\looper.js",
            "line": 222,
            "description": "Stop the part and cue it to step 0.",
            "itemtype": "method",
            "name": "stop",
            "params": [
                {
                    "name": "time",
                    "description": "seconds from now",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5.Part"
        },
        {
            "file": "src\\looper.js",
            "line": 233,
            "description": "Pause the part. Playback will resume\nfrom the current step.",
            "itemtype": "method",
            "name": "pause",
            "params": [
                {
                    "name": "time",
                    "description": "seconds from now",
                    "type": "Number"
                }
            ],
            "class": "p5.Part"
        },
        {
            "file": "src\\looper.js",
            "line": 246,
            "description": "Add a p5.Phrase to this Part.",
            "itemtype": "method",
            "name": "addPhrase",
            "params": [
                {
                    "name": "phrase",
                    "description": "reference to a p5.Phrase",
                    "type": "p5.Phrase"
                }
            ],
            "class": "p5.Part"
        },
        {
            "file": "src\\looper.js",
            "line": 269,
            "description": "Remove a phrase from this part, based on the name it was\ngiven when it was created.",
            "itemtype": "method",
            "name": "removePhrase",
            "params": [
                {
                    "name": "phraseName",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "p5.Part"
        },
        {
            "file": "src\\looper.js",
            "line": 284,
            "description": "Get a phrase from this part, based on the name it was\ngiven when it was created. Now you can modify its array.",
            "itemtype": "method",
            "name": "getPhrase",
            "params": [
                {
                    "name": "phraseName",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "p5.Part"
        },
        {
            "file": "src\\looper.js",
            "line": 299,
            "description": "Get a phrase from this part, based on the name it was\ngiven when it was created. Now you can modify its array.",
            "itemtype": "method",
            "name": "replaceSequence",
            "params": [
                {
                    "name": "phraseName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "sequence",
                    "description": "Array of values to pass into the callback\n                          at each step of the phrase.",
                    "type": "Array"
                }
            ],
            "class": "p5.Part"
        },
        {
            "file": "src\\looper.js",
            "line": 330,
            "description": "Fire a callback function at every step.",
            "itemtype": "method",
            "name": "onStep",
            "params": [
                {
                    "name": "callback",
                    "description": "The name of the callback\n                            you want to fire\n                            on every beat/tatum.",
                    "type": "Function"
                }
            ],
            "class": "p5.Part"
        },
        {
            "file": "src\\looper.js",
            "line": 420,
            "description": "Start playback of the score.",
            "itemtype": "method",
            "name": "start",
            "class": "p5.Score"
        },
        {
            "file": "src\\looper.js",
            "line": 430,
            "description": "Stop playback of the score.",
            "itemtype": "method",
            "name": "stop",
            "class": "p5.Score"
        },
        {
            "file": "src\\looper.js",
            "line": 441,
            "description": "Pause playback of the score.",
            "itemtype": "method",
            "name": "pause",
            "class": "p5.Score"
        },
        {
            "file": "src\\looper.js",
            "line": 450,
            "description": "Loop playback of the score.",
            "itemtype": "method",
            "name": "loop",
            "class": "p5.Score"
        },
        {
            "file": "src\\looper.js",
            "line": 460,
            "description": "Stop looping playback of the score. If it\nis currently playing, this will go into effect\nafter the current round of playback completes.",
            "itemtype": "method",
            "name": "noLoop",
            "class": "p5.Score"
        },
        {
            "file": "src\\looper.js",
            "line": 485,
            "description": "Set the tempo for all parts in the score",
            "params": [
                {
                    "name": "BPM",
                    "description": "Beats Per Minute",
                    "type": "Number"
                },
                {
                    "name": "rampTime",
                    "description": "Seconds from now",
                    "type": "Number"
                }
            ],
            "class": "p5.Score"
        },
        {
            "file": "src\\master.js",
            "line": 7,
            "description": "Master contains AudioContext and the master sound output.",
            "class": "p5.Noise"
        },
        {
            "file": "src\\master.js",
            "line": 56,
            "description": "<p>Set the master amplitude (volume) for sound in this sketch.</p>\n\n<p>Note that values greater than 1.0 may lead to digital distortion.</p>\n \n<p><b>How This Works</b>: When you load the p5.sound module, it\ncreates a single instance of p5sound. All sound objects in this\nmodule output to p5sound before reaching your computer's output.\nSo if you change the amplitude of p5sound, it impacts all of the\nsound in this module.</p>",
            "itemtype": "method",
            "name": "masterVolume",
            "params": [
                {
                    "name": "volume",
                    "description": "Master amplitude (volume) for sound in\n                         this sketch. Should be between 0.0\n                         (silence) and 1.0. Values greater than\n                         1.0 may lead to digital distortion.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n<div><code>\nmasterVolume(.5);\n</code></div>\n "
            ],
            "class": "p5.Noise"
        },
        {
            "file": "src\\master.js",
            "line": 82,
            "description": "Returns a number representing the master amplitude (volume) for sound \nin this sketch.",
            "itemtype": "method",
            "name": "getMasterVolume",
            "return": {
                "description": "Master amplitude (volume) for sound in this sketch.\n                 Should be between 0.0 (silence) and 1.0.",
                "type": "Number"
            },
            "class": "p5.Noise"
        },
        {
            "file": "src\\master.js",
            "line": 94,
            "description": "Multiply the output volume (amplitude) of the sound of this sketch\nbetween 0.0 (silence) and 1.0 (full volume).\n1.0 is the maximum amplitude of a digital sound, so multiplying\nby greater than 1.0 may cause digital distortion. To\nfade, provide a <code>rampTime</code> parameter. For more\ncomplex fades, see the Env class.\n\nAlternately, you can pass in a signal source such as an\noscillator to modulate the amplitude with an audio signal.",
            "itemtype": "method",
            "name": "setMasterVolume",
            "params": [
                {
                    "name": "volume",
                    "description": "Volume (amplitude) between 0.0\n                                   and 1.0 or modulating signal/oscillator",
                    "type": "Number|Object"
                },
                {
                    "name": "rampTime",
                    "description": "Fade for t seconds",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "timeFromNow",
                    "description": "Schedule this event to happen at\n                               t seconds in the future",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5.Noise"
        },
        {
            "file": "src\\master.js",
            "line": 132,
            "description": "p5.soundOut is the p5.sound master output. It sends output to\nthe destination of this window's web audio context. It contains \nWeb Audio API nodes including a dyanmicsCompressor (<code>.limiter</code>),\nand Gain Nodes for <code>.input</code> and <code>.output</code>.",
            "itemtype": "property",
            "name": "p5.soundOut",
            "type": "{Object}",
            "class": "p5.Noise"
        },
        {
            "file": "src\\master.js",
            "line": 143,
            "description": "a silent connection to the DesinationNode\nwhich will ensure that anything connected to it\nwill not be garbage collected",
            "access": "private",
            "tagname": "",
            "class": "p5.Noise"
        },
        {
            "file": "src\\noise.js",
            "line": 74,
            "description": "Set type of noise to 'white', 'pink' or 'brown'.\nWhite is the default.",
            "itemtype": "method",
            "name": "setType",
            "params": [
                {
                    "name": "type",
                    "description": "'white', 'pink' or 'brown'",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "p5.Noise"
        },
        {
            "file": "src\\noise.js",
            "line": 106,
            "description": "Start the noise",
            "itemtype": "method",
            "name": "start",
            "class": "p5.Noise"
        },
        {
            "file": "src\\noise.js",
            "line": 124,
            "description": "Stop the noise.",
            "itemtype": "method",
            "name": "stop",
            "class": "p5.Noise"
        },
        {
            "file": "src\\noise.js",
            "line": 137,
            "description": "Pan the noise.",
            "itemtype": "method",
            "name": "pan",
            "params": [
                {
                    "name": "panning",
                    "description": "Number between -1 (left)\n                         and 1 (right)",
                    "type": "Number"
                },
                {
                    "name": "timeFromNow",
                    "description": "schedule this event to happen\n                              seconds from now",
                    "type": "Number"
                }
            ],
            "class": "p5.Noise"
        },
        {
            "file": "src\\noise.js",
            "line": 147,
            "description": "Set the amplitude of the noise between 0 and 1.0. Or,\nmodulate amplitude with an audio signal such as an oscillator.",
            "params": [
                {
                    "name": "volume",
                    "description": "amplitude between 0 and 1.0\n                                   or modulating signal/oscillator",
                    "type": "Number|Object"
                },
                {
                    "name": "rampTime",
                    "description": "create a fade that lasts rampTime",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "timeFromNow",
                    "description": "schedule this event to happen\n                              seconds from now",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5.Noise"
        },
        {
            "file": "src\\noise.js",
            "line": 158,
            "description": "Send output to a p5.sound or web audio object",
            "itemtype": "method",
            "name": "connect",
            "params": [
                {
                    "name": "unit",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "p5.Noise"
        },
        {
            "file": "src\\noise.js",
            "line": 165,
            "description": "Disconnect all output.",
            "itemtype": "method",
            "name": "disconnect",
            "class": "p5.Noise"
        },
        {
            "file": "src\\oscillator.js",
            "line": 76,
            "description": "Start an oscillator. Accepts an optional parameter to\ndetermine how long (in seconds from now) until the\noscillator starts.",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "time",
                    "description": "startTime in seconds from now.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "frequency",
                    "description": "frequency in Hz.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5.Oscillator"
        },
        {
            "file": "src\\oscillator.js",
            "line": 114,
            "description": "Stop an oscillator. Accepts an optional parameter\nto determine how long (in seconds from now) until the\noscillator stops.",
            "itemtype": "method",
            "name": "stop",
            "params": [
                {
                    "name": "secondsFromNow",
                    "description": "Time, in seconds from now.",
                    "type": "Number"
                }
            ],
            "class": "p5.Oscillator"
        },
        {
            "file": "src\\oscillator.js",
            "line": 131,
            "description": "Set the amplitude between 0 and 1.0. Or, pass in an object\nsuch as an oscillator to modulate amplitude with an audio signal.",
            "itemtype": "method",
            "name": "amp",
            "params": [
                {
                    "name": "vol",
                    "description": "between 0 and 1.0\n                            or a modulating signal/oscillator",
                    "type": "Number|Object"
                },
                {
                    "name": "rampTime",
                    "description": "create a fade that lasts rampTime",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "timeFromNow",
                    "description": "schedule this event to happen\n                              seconds from now",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "gain  If no value is provided,\n                            returns the Web Audio API\n                            AudioParam that controls\n                            this oscillator's\n                            gain/amplitude/volume)",
                "type": "AudioParam"
            },
            "class": "p5.Oscillator"
        },
        {
            "file": "src\\oscillator.js",
            "line": 175,
            "description": "Set frequency of an oscillator to a value. Or, pass in an object\nsuch as an oscillator to modulate the frequency with an audio signal.",
            "itemtype": "method",
            "name": "freq",
            "params": [
                {
                    "name": "Frequency",
                    "description": "Frequency in Hz\n                                      or modulating signal/oscillator",
                    "type": "Number|Object"
                },
                {
                    "name": "rampTime",
                    "description": "Ramp time (in seconds)",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "timeFromNow",
                    "description": "Schedule this event to happen\n                                 at x seconds from now",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "Frequency If no value is provided,\n                                returns the Web Audio API\n                                AudioParam that controls\n                                this oscillator's frequency",
                "type": "AudioParam"
            },
            "example": [
                "\n<div><code>\nvar osc = new p5.Oscillator(300);\nosc.start();\nosc.freq(40, 10);\n</code></div>"
            ],
            "class": "p5.Oscillator"
        },
        {
            "file": "src\\oscillator.js",
            "line": 229,
            "description": "Set type to 'sine', 'triangle', 'sawtooth' or 'square'.",
            "itemtype": "method",
            "name": "setType",
            "params": [
                {
                    "name": "type",
                    "description": "'sine', 'triangle', 'sawtooth' or 'square'.",
                    "type": "String"
                }
            ],
            "class": "p5.Oscillator"
        },
        {
            "file": "src\\oscillator.js",
            "line": 243,
            "description": "Connect to a p5.sound / Web Audio object.",
            "itemtype": "method",
            "name": "connect",
            "params": [
                {
                    "name": "unit",
                    "description": "A p5.sound or Web Audio object",
                    "type": "Object"
                }
            ],
            "class": "p5.Oscillator"
        },
        {
            "file": "src\\oscillator.js",
            "line": 263,
            "description": "Disconnect all outputs",
            "itemtype": "method",
            "name": "disconnect",
            "class": "p5.Oscillator"
        },
        {
            "file": "src\\oscillator.js",
            "line": 275,
            "description": "Pan between Left (-1) and Right (1)",
            "itemtype": "method",
            "name": "pan",
            "params": [
                {
                    "name": "panning",
                    "description": "Number between -1 and 1",
                    "type": "Number"
                },
                {
                    "name": "timeFromNow",
                    "description": "schedule this event to happen\n                              seconds from now",
                    "type": "Number"
                }
            ],
            "class": "p5.Oscillator"
        },
        {
            "file": "src\\oscillator.js",
            "line": 308,
            "description": "Set the phase of an oscillator between 0.0 and 1.0",
            "itemtype": "method",
            "name": "phase",
            "params": [
                {
                    "name": "phase",
                    "description": "float between 0.0 and 1.0",
                    "type": "Number"
                }
            ],
            "class": "p5.Oscillator"
        },
        {
            "file": "src\\oscillator.js",
            "line": 361,
            "description": "Add a value to the p5.Oscillator's output amplitude,\nand return the oscillator. Calling this method again\nwill override the initial add() with a new value.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "number",
                    "description": "Constant number to add",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Oscillator Returns this oscillator\n                                   with scaled output",
                "type": "p5.Oscillator"
            },
            "class": "p5.Oscillator"
        },
        {
            "file": "src\\oscillator.js",
            "line": 379,
            "description": "Multiply the p5.Oscillator's output amplitude\nby a fixed value (i.e. turn it up!). Calling this method\nagain will override the initial mult() with a new value.",
            "itemtype": "method",
            "name": "mult",
            "params": [
                {
                    "name": "number",
                    "description": "Constant number to multiply",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Oscillator Returns this oscillator\n                                   with multiplied output",
                "type": "p5.Oscillator"
            },
            "class": "p5.Oscillator"
        },
        {
            "file": "src\\oscillator.js",
            "line": 396,
            "description": "Scale this oscillator's amplitude values to a given\nrange, and return the oscillator. Calling this method\nagain will override the initial scale() with new values.",
            "itemtype": "method",
            "name": "scale",
            "params": [
                {
                    "name": "inMin",
                    "description": "input range minumum",
                    "type": "Number"
                },
                {
                    "name": "inMax",
                    "description": "input range maximum",
                    "type": "Number"
                },
                {
                    "name": "outMin",
                    "description": "input range minumum",
                    "type": "Number"
                },
                {
                    "name": "outMax",
                    "description": "input range maximum",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Oscillator Returns this oscillator\n                                   with scaled output",
                "type": "p5.Oscillator"
            },
            "class": "p5.Oscillator"
        },
        {
            "file": "src\\oscillator.js",
            "line": 432,
            "description": "Constructor: <code>new p5.SinOsc()</code>.\nThis creates a Sine Wave Oscillator and is\nequivalent to <code> new p5.Oscillator('sine')\n</code> or creating a p5.Oscillator and then calling\nits method <code>setType('sine')</code>.\nSee p5.Oscillator for methods.",
            "itemtype": "method",
            "name": "p5.SinOsc",
            "params": [
                {
                    "name": "freq",
                    "description": "Set the frequency",
                    "type": "[Number]"
                }
            ],
            "class": "p5.Oscillator"
        },
        {
            "file": "src\\oscillator.js",
            "line": 449,
            "description": "Constructor: <code>new p5.TriOsc()</code>.\nThis creates a Triangle Wave Oscillator and is\nequivalent to <code>new p5.Oscillator('triangle')\n</code> or creating a p5.Oscillator and then calling\nits method <code>setType('triangle')</code>.\nSee p5.Oscillator for methods.",
            "itemtype": "method",
            "name": "p5.TriOsc",
            "params": [
                {
                    "name": "freq",
                    "description": "Set the frequency",
                    "type": "[Number]"
                }
            ],
            "class": "p5.Oscillator"
        },
        {
            "file": "src\\oscillator.js",
            "line": 466,
            "description": "Constructor: <code>new p5.SawOsc()</code>.\nThis creates a SawTooth Wave Oscillator and is\nequivalent to <code> new p5.Oscillator('sawtooth')\n</code> or creating a p5.Oscillator and then calling\nits method <code>setType('sawtooth')</code>.\nSee p5.Oscillator for methods.",
            "itemtype": "method",
            "name": "p5.SawOsc",
            "params": [
                {
                    "name": "freq",
                    "description": "Set the frequency",
                    "type": "[Number]"
                }
            ],
            "class": "p5.Oscillator"
        },
        {
            "file": "src\\oscillator.js",
            "line": 483,
            "description": "Constructor: <code>new p5.SqrOsc()</code>.\nThis creates a Square Wave Oscillator and is\nequivalent to <code> new p5.Oscillator('square')\n</code> or creating a p5.Oscillator and then calling\nits method <code>setType('square')</code>.\nSee p5.Oscillator for methods.",
            "itemtype": "method",
            "name": "p5.SqrOsc",
            "params": [
                {
                    "name": "freq",
                    "description": "Set the frequency",
                    "type": "[Number]"
                }
            ],
            "class": "p5.Oscillator"
        },
        {
            "file": "src\\peakDetect.js",
            "line": 112,
            "description": "isDetected is set to true when a peak is detected.",
            "itemtype": "attribute",
            "name": "isDetected",
            "type": "{Boolean}",
            "default": "false",
            "class": "p5.PeakDetect"
        },
        {
            "file": "src\\peakDetect.js",
            "line": 129,
            "description": "The update method is run in the draw loop.\n\nAccepts an FFT object. You must call .analyze()\non the FFT object prior to updating the peakDetect\nbecause it relies on a completed FFT analysis.",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "fftObject",
                    "description": "A p5.FFT object",
                    "type": "p5.FFT"
                }
            ],
            "class": "p5.PeakDetect"
        },
        {
            "file": "src\\peakDetect.js",
            "line": 162,
            "description": "onPeak accepts two arguments: a function to call when\na peak is detected, and optionally a value to pass\ninto that function.",
            "params": [
                {
                    "name": "callback",
                    "description": "Name of a function that will\n                            be called when a peak is\n                            detected.",
                    "type": "Function"
                },
                {
                    "name": "val",
                    "description": "Optional value to pass\n                            into the function when\n                            a peak is detected.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "example": [
                "\n<div><code>\nvar cnv, soundFile, fft, peakDetect;\n\nfunction setup() {\n  cnv = createCanvas(100,100);\n  \n  cnv.mouseClicked = function() {\n    soundFile.play();\n  }\n  \n}\n\nfunction draw() {\n\n}\n\n</code></div>"
            ],
            "class": "p5.PeakDetect"
        },
        {
            "file": "src\\pulse.js",
            "line": 80,
            "description": "Set the width of a Pulse object (an oscillator that implements\nPulse Width Modulation).",
            "itemtype": "method",
            "name": "width",
            "params": [
                {
                    "name": "width",
                    "description": "Width between the pulses (0 to 1.0,\n                       defaults to 0)",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5.Pulse"
        },
        {
            "file": "src\\reverb.js",
            "line": 59,
            "description": "Connect a source to the reverb, and assign reverb parameters.",
            "itemtype": "method",
            "name": "process",
            "params": [
                {
                    "name": "src",
                    "description": "p5.sound / Web Audio object with a sound\n                         output.",
                    "type": "Object"
                },
                {
                    "name": "seconds",
                    "description": "Duration of the reverb, in seconds.\n                         Min: 0, Max: 10. Defaults to 3.",
                    "type": "[Number]"
                },
                {
                    "name": "decayRate",
                    "description": "Percentage of decay with each echo.\n                          Min: 0, Max: 100. Defaults to 2.",
                    "type": "[Number]"
                },
                {
                    "name": "reverse",
                    "description": "Play the reverb backwards or forwards.",
                    "type": "[Boolean]"
                }
            ],
            "class": "p5.Reverb"
        },
        {
            "file": "src\\reverb.js",
            "line": 89,
            "description": "Set the reverb settings. Similar to .process(), but without\nassigning a new input.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "seconds",
                    "description": "Duration of the reverb, in seconds.\n                         Min: 0, Max: 10. Defaults to 3.",
                    "type": "[Number]"
                },
                {
                    "name": "decayRate",
                    "description": "Percentage of decay with each echo.\n                          Min: 0, Max: 100. Defaults to 2.",
                    "type": "[Number]"
                },
                {
                    "name": "reverse",
                    "description": "Play the reverb backwards or forwards.",
                    "type": "[Boolean]"
                }
            ],
            "class": "p5.Reverb"
        },
        {
            "file": "src\\reverb.js",
            "line": 117,
            "description": "Set the output level of the delay effect.",
            "itemtype": "method",
            "name": "amp",
            "params": [
                {
                    "name": "volume",
                    "description": "amplitude between 0 and 1.0",
                    "type": "Number"
                },
                {
                    "name": "rampTime",
                    "description": "create a fade that lasts rampTime",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "timeFromNow",
                    "description": "schedule this event to happen\n                              seconds from now",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5.Reverb"
        },
        {
            "file": "src\\reverb.js",
            "line": 136,
            "description": "Send output to a p5.sound or web audio object",
            "itemtype": "method",
            "name": "connect",
            "params": [
                {
                    "name": "unit",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "p5.Reverb"
        },
        {
            "file": "src\\reverb.js",
            "line": 147,
            "description": "Disconnect all output.",
            "itemtype": "method",
            "name": "disconnect",
            "class": "p5.Reverb"
        },
        {
            "file": "src\\reverb.js",
            "line": 156,
            "description": "Inspired by Simple Reverb by Jordan Santell\nhttps://github.com/web-audio-components/simple-reverb/blob/master/index.js\n \nUtility function for building an impulse response\nbased on the module parameters.",
            "access": "private",
            "tagname": "",
            "class": "p5.Reverb"
        },
        {
            "file": "src\\reverb.js",
            "line": 249,
            "description": "Internally, the p5.Convolver uses the a\n<a href=\"http://www.w3.org/TR/webaudio/#ConvolverNode\">\nWeb Audio Convolver Node</a>.",
            "itemtype": "property",
            "name": "convolverNode",
            "type": "{Object}  Web Audio Convolver Node",
            "class": "p5.Convolver"
        },
        {
            "file": "src\\reverb.js",
            "line": 288,
            "description": "Create a p5.Convolver. Accepts a path to a soundfile \nthat will be used to generate an impulse response.",
            "itemtype": "method",
            "name": "createConvolver",
            "params": [
                {
                    "name": "path",
                    "description": "path to a sound file",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "function (optional)",
                    "type": "[Function]"
                }
            ],
            "return": {
                "description": "",
                "type": "p5.Convolver"
            },
            "example": [
                "\n<div><code>\nvar cVerb, sound;\nfunction preload() {\n  // We have both MP3 and OGG versions of all sound assets\n  soundFormats('ogg', 'mp3');\n  \n  // Try replacing 'bx-spring' with other soundfiles like\n  // 'concrete-tunnel' 'small-plate' 'drum' 'beatbox'\n  cVerb = createConvolver('assets/bx-spring.mp3');\n\n  // Try replacing 'Damscray_DancingTiger' with\n  // 'beat', 'doorbell', lucky_dragons_-_power_melody'\n  sound = loadSound('assets/Damscray_DancingTiger.mp3');\n}\n\nfunction setup() {\n  // disconnect from master output...\n  sound.disconnect();\n  \n  // ...and process with cVerb\n  // so that we only hear the convolution\n  cVerb.process(sound);\n  \n  sound.play();\n}\n</code></div>"
            ],
            "class": "p5.Convolver"
        },
        {
            "file": "src\\reverb.js",
            "line": 334,
            "description": "Private method to load a buffer as an Impulse Response,\nassign it to the convolverNode, and add to the Array of .impulses.",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "p5.Convolver"
        },
        {
            "file": "src\\reverb.js",
            "line": 368,
            "description": "Connect a source to the reverb, and assign reverb parameters.",
            "itemtype": "method",
            "name": "process",
            "params": [
                {
                    "name": "src",
                    "description": "p5.sound / Web Audio object with a sound\n                         output.",
                    "type": "Object"
                }
            ],
            "example": [
                "\n<div><code>\nvar cVerb, sound;\nfunction preload() {\n  soundFormats('ogg', 'mp3');\n  \n  cVerb = createConvolver('assets/concrete-tunnel.mp3');\n\n  sound = loadSound('assets/beat.mp3');\n}\n\nfunction setup() {\n  // disconnect from master output...\n  sound.disconnect();\n  \n  // ...and process with (i.e. connect to) cVerb\n  // so that we only hear the convolution\n  cVerb.process(sound);\n  \n  sound.play();\n}\n</code></div>"
            ],
            "class": "p5.Convolver"
        },
        {
            "file": "src\\reverb.js",
            "line": 401,
            "description": "If you load multiple impulse files using the .addImpulse method,\nthey will be stored as Objects in this Array. Toggle between them\nwith the <code>toggleImpulse(id)</code> method.",
            "itemtype": "property",
            "name": "impulses",
            "type": "{Array} Array of Web Audio Buffers",
            "class": "p5.Convolver"
        },
        {
            "file": "src\\reverb.js",
            "line": 411,
            "description": "Load and assign a new Impulse Response to the p5.Convolver.\nThe impulse is added to the <code>.impulses</code> array. Previous\nimpulses can be accessed with the <code>.toggleImpulse(id)</code>\nmethod.",
            "itemtype": "method",
            "name": "addImpulse",
            "params": [
                {
                    "name": "path",
                    "description": "path to a sound file",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "function (optional)",
                    "type": "[Function]"
                }
            ],
            "class": "p5.Convolver"
        },
        {
            "file": "src\\reverb.js",
            "line": 429,
            "description": "Similar to .addImpulse, except that the <code>.impulses</code>\nArray is reset to save memory. A new <code>.impulses</code>\narray is created with this impulse as the only item.",
            "itemtype": "method",
            "name": "resetImpulse",
            "params": [
                {
                    "name": "path",
                    "description": "path to a sound file",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "function (optional)",
                    "type": "[Function]"
                }
            ],
            "class": "p5.Convolver"
        },
        {
            "file": "src\\reverb.js",
            "line": 447,
            "description": "If you have used <code>.addImpulse()</code> to add multiple impulses\nto a p5.Convolver, then you can use this method to toggle between\nthe items in the <code>.impulses</code> Array. Accepts a parameter\nto identify which impulse you wish to use, identified either by its\noriginal filename (String) or by its position in the <code>.impulses\n</code> Array (Number).<br/>\nYou can access the objects in the .impulses Array directly. Each\nObject has two attributes: an <code>.audioBuffer</code> (type:\nWeb Audio <a href=\"\nhttp://webaudio.github.io/web-audio-api/#the-audiobuffer-interface\">\nAudioBuffer)</a> and a <code>.name</code>, a String that corresponds\nwith the original filename.",
            "itemtype": "method",
            "name": "toggleImpulse",
            "params": [
                {
                    "name": "id",
                    "description": "Identify the impulse by its original filename\n                          (String), or by its position in the\n                          <code>.impulses</code> Array (Number).",
                    "type": "String|Number"
                }
            ],
            "class": "p5.Convolver"
        },
        {
            "file": "src\\signal.js",
            "line": 61,
            "description": "Fade to value, for smooth transitions",
            "itemtype": "method",
            "name": "fade",
            "params": [
                {
                    "name": "value",
                    "description": "Value to set this signal",
                    "type": "Number"
                },
                {
                    "name": "secondsFromNow",
                    "description": "Length of fade, in seconds from now",
                    "type": "[Number]"
                }
            ],
            "class": "p5.Signal"
        },
        {
            "file": "src\\signal.js",
            "line": 74,
            "description": "Connect a p5.sound object or Web Audio node to this\np5.Signal so that its amplitude values can be scaled.",
            "params": [
                {
                    "name": "input",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "p5.Signal"
        },
        {
            "file": "src\\signal.js",
            "line": 90,
            "description": "Add a constant value to this audio signal,\nand return the resulting audio signal. Does\nnot change the value of the original signal,\ninstead it returns a new p5.SignalAdd.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "number",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "object",
                "type": "p5.SignalAdd"
            },
            "class": "p5.Signal"
        },
        {
            "file": "src\\signal.js",
            "line": 110,
            "description": "Multiply this signal by a constant value,\nand return the resulting audio signal. Does\nnot change the value of the original signal,\ninstead it returns a new p5.SignalMult.",
            "itemtype": "method",
            "name": "mult",
            "params": [
                {
                    "name": "number",
                    "description": "to multiply",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "object",
                "type": "Tone.Multiply"
            },
            "class": "p5.Signal"
        },
        {
            "file": "src\\signal.js",
            "line": 130,
            "description": "Scale this signal value to a given range,\nand return the result as an audio signal. Does\nnot change the value of the original signal,\ninstead it returns a new p5.SignalScale.",
            "itemtype": "method",
            "name": "scale",
            "params": [
                {
                    "name": "number",
                    "description": "to multiply",
                    "type": "Number"
                },
                {
                    "name": "inMin",
                    "description": "input range minumum",
                    "type": "Number"
                },
                {
                    "name": "inMax",
                    "description": "input range maximum",
                    "type": "Number"
                },
                {
                    "name": "outMin",
                    "description": "input range minumum",
                    "type": "Number"
                },
                {
                    "name": "outMax",
                    "description": "input range maximum",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "object",
                "type": "p5.SignalScale"
            },
            "class": "p5.Signal"
        },
        {
            "file": "src\\sndcore.js",
            "line": 46,
            "description": "p5.sound developed by Jason Sigal for the Processing Foundation, Google Summer of Code 2014. The MIT License (MIT).\n\nhttp://github.com/therewasaguy/p5.sound\n\nSome of the many audio libraries & resources that inspire p5.sound:\n - TONE.js (c) Yotam Mann, 2014. Licensed under The MIT License (MIT). https://github.com/TONEnoTONE/Tone.js\n - buzz.js (c) Jay Salvat, 2013. Licensed under The MIT License (MIT). http://buzz.jaysalvat.com/\n - Boris Smus Web Audio API book, 2013. Licensed under the Apache License http://www.apache.org/licenses/LICENSE-2.0\n - wavesurfer.js https://github.com/katspaugh/wavesurfer.js\n - Web Audio Components by Jordan Santell https://github.com/web-audio-components\n - Wilm Thoben's Sound library for Processing https://github.com/processing/processing/tree/master/java/libraries/sound\n \n Web Audio API: http://w3.org/TR/webaudio/",
            "class": "p5.sound",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "src\\sndcore.js",
            "line": 65,
            "description": "Web Audio SHIMS and helper functions to ensure compatability across browsers",
            "class": "p5.sound",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "src\\sndcore.js",
            "line": 75,
            "description": "<p>Returns the Audio Context for this sketch. Useful for users\nwho would like to dig deeper into the <a target='_blank' href=\n'http://webaudio.github.io/web-audio-api/'>Web Audio API\n</a>.</p>",
            "itemtype": "method",
            "name": "getAudioContext",
            "return": {
                "description": "AudioContext for this sketch",
                "type": "Object"
            },
            "class": "p5.sound",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "src\\sndcore.js",
            "line": 116,
            "description": "Determine which filetypes are supported (inspired by buzz.js)\nThe audio element (el) will only be used to test browser support for various audio formats",
            "class": "p5.sound",
            "module": "p5.sound",
            "submodule": "p5.sound"
        },
        {
            "file": "src\\soundRecorder.js",
            "line": 91,
            "description": "callback invoked when the recording is over",
            "access": "private",
            "tagname": "",
            "type": "{function(Float32Array)}",
            "class": "p5.SoundRecorder",
            "module": "p5.sound"
        },
        {
            "file": "src\\soundRecorder.js",
            "line": 106,
            "description": "Connect a specific device to the p5.SoundRecorder.\nIf no parameter is given, p5.SoundRecorer will record\nall audible p5.sound from your sketch.",
            "itemtype": "method",
            "name": "setInput",
            "params": [
                {
                    "name": "unit",
                    "description": "p5.sound object or a web audio unit\n                       that outputs sound",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "p5.SoundRecorder",
            "module": "p5.sound"
        },
        {
            "file": "src\\soundRecorder.js",
            "line": 128,
            "description": "Start recording. To access the recording, provide\na p5.SoundFile as the first parameter. The p5.SoundRecorder\nwill send its recording to that p5.SoundFile for playback once\nrecording is complete. Optional parameters include duration\n(in seconds) of the recording, and a callback function that\nwill be called once the complete recording has been\ntransfered to the p5.SoundFile.",
            "itemtype": "method",
            "name": "record",
            "params": [
                {
                    "name": "soundFile",
                    "description": "p5.SoundFile",
                    "type": "p5.SoundFile"
                },
                {
                    "name": "duration",
                    "description": "Time (in seconds)",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "The name of a function that will be\n                              called once the recording completes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "p5.SoundRecorder",
            "module": "p5.sound"
        },
        {
            "file": "src\\soundRecorder.js",
            "line": 164,
            "description": "Stop the recording. Once the recording is stopped,\nthe results will be sent to the p5.SoundFile that\nwas given on .record(), and if a callback function\nwas provided on record, that function will be called.",
            "itemtype": "method",
            "name": "stop",
            "class": "p5.SoundRecorder",
            "module": "p5.sound"
        },
        {
            "file": "src\\soundRecorder.js",
            "line": 185,
            "description": "internal method called on audio process",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "AudioProcessorEvent"
                }
            ],
            "class": "p5.SoundRecorder",
            "module": "p5.sound"
        },
        {
            "file": "src\\soundRecorder.js",
            "line": 242,
            "description": "Save a p5.SoundFile as a .wav audio file.",
            "itemtype": "method",
            "name": "saveSound",
            "params": [
                {
                    "name": "soundFile",
                    "description": "p5.SoundFile that you wish to save",
                    "type": "p5.SoundFile"
                },
                {
                    "name": "name",
                    "description": "name of the resulting .wav file.",
                    "type": "String"
                }
            ],
            "class": "p5.SoundRecorder",
            "module": "p5.sound"
        },
        {
            "file": "src\\soundfile.js",
            "line": 129,
            "description": "loadSound() returns a new p5.SoundFile from a specified\npath. If called during preload(), the p5.SoundFile will be ready\nto play in time for setup() and draw(). If called outside of\npreload, the p5.SoundFile will not be ready immediately, so\nloadSound accepts a callback as the second parameter. Using a\n<a href=\"https://github.com/processing/p5.js/wiki/Local-server\">\nlocal server</a> is recommended when loading external files.",
            "itemtype": "method",
            "name": "loadSound",
            "params": [
                {
                    "name": "path",
                    "description": "Path to the sound file, or an array with\n                                  paths to soundfiles in multiple formats\n                                  i.e. ['sound.ogg', 'sound.mp3'].\n                                  Alternately, accepts an object: either\n                                  from the HTML5 File API, or a p5.File.",
                    "type": "String/Array"
                },
                {
                    "name": "callback",
                    "description": "Name of a function to call once file loads",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "Name of a function to call while file is loading.\n                               This function will receive a percentage from 0.0\n                               to 1.0.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns a p5.SoundFile",
                "type": "SoundFile"
            },
            "example": [
                " \n<div><code>\nfunction preload() {\n mySound = loadSound('assets/doorbell.mp3');\n}\n\nfunction setup() {\n  mySound.setVolume(0.1);\n  mySound.play();\n}\n</code></div>"
            ],
            "class": "p5.SoundFile",
            "module": "p5.sound"
        },
        {
            "file": "src\\soundfile.js",
            "line": 171,
            "description": "This is a helper function that the p5.SoundFile calls to load\nitself. Accepts a callback (the name of another function)\nas an optional parameter.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "callback",
                    "description": "Name of a function to call once file loads",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "p5.SoundFile",
            "module": "p5.sound"
        },
        {
            "file": "src\\soundfile.js",
            "line": 229,
            "description": "Returns true if the sound file finished loading successfully.",
            "itemtype": "method",
            "name": "isLoaded",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "p5.SoundFile",
            "module": "p5.sound"
        },
        {
            "file": "src\\soundfile.js",
            "line": 243,
            "description": "Play the p5.SoundFile",
            "itemtype": "method",
            "name": "play",
            "params": [
                {
                    "name": "startTime",
                    "description": "(optional) schedule playback to start (in seconds from now).",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "rate",
                    "description": "(optional) playback rate",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "amp",
                    "description": "(optional) amplitude (volume)\n                                    of playback",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "cueStart",
                    "description": "(optional) cue start time in seconds",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "duration",
                    "description": "(optional) duration of playback in seconds",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5.SoundFile",
            "module": "p5.sound"
        },
        {
            "file": "src\\soundfile.js",
            "line": 368,
            "description": "p5.SoundFile has two play modes: <code>restart</code> and\n<code>sustain</code>. Play Mode determines what happens to a\np5.SoundFile if it is triggered while in the middle of playback.\nIn sustain mode, playback will continue simultaneous to the\nnew playback. In restart mode, play() will stop playback\nand start over. Sustain is the default mode.",
            "itemtype": "method",
            "name": "playMode",
            "params": [
                {
                    "name": "str",
                    "description": "'restart' or 'sustain'",
                    "type": "String"
                }
            ],
            "example": [
                "\n<div><code>\nfunction setup(){\n  mySound = loadSound('assets/Damscray_DancingTiger.mp3');\n}\nfunction mouseClicked() {\n  mySound.playMode('sustain');\n  mySound.play();\n}\nfunction keyPressed() {\n  mySound.playMode('restart');\n  mySound.play();\n}\n \n </code></div>"
            ],
            "class": "p5.SoundFile",
            "module": "p5.sound"
        },
        {
            "file": "src\\soundfile.js",
            "line": 413,
            "description": "Pauses a file that is currently playing. If the file is not\nplaying, then nothing will happen.\n\nAfter pausing, .play() will resume from the paused\nposition.\nIf p5.SoundFile had been set to loop before it was paused,\nit will continue to loop after it is unpaused with .play().",
            "itemtype": "method",
            "name": "pause",
            "params": [
                {
                    "name": "startTime",
                    "description": "(optional) schedule event to occur\n                             seconds from now",
                    "type": "Number",
                    "optional": true
                }
            ],
            "example": [
                "\n<div><code>\nvar soundFile;\n\nfunction preload() {\n  soundFormats('ogg', 'mp3');\n  soundFile = loadSound('assets/Damscray_-_Dancing_Tiger_02.mp3');\n}\nfunction setup() {\n  background(0, 255, 0);\n  soundFile.setVolume(0.1);\n  soundFile.loop();\n}\nfunction keyTyped() {\n  if (key == 'p') {\n    soundFile.pause();\n    background(255, 0, 0);\n  }\n}\n\nfunction keyReleased() {\n  if (key == 'p') {\n    soundFile.play();\n    background(0, 255, 0);\n  }\n</code>\n</div>"
            ],
            "class": "p5.SoundFile",
            "module": "p5.sound"
        },
        {
            "file": "src\\soundfile.js",
            "line": 472,
            "description": "Loop the p5.SoundFile. Accepts optional parameters to set the\nplayback rate, playback volume, loopStart, loopEnd.",
            "itemtype": "method",
            "name": "loop",
            "params": [
                {
                    "name": "startTime",
                    "description": "(optional) schedule event to occur\n                            seconds from now",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "rate",
                    "description": "(optional) playback rate",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "amp",
                    "description": "(optional) playback volume",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "cueLoopStart",
                    "description": "startTime in seconds",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "duration",
                    "description": "(optional) loop duration in seconds",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5.SoundFile",
            "module": "p5.sound"
        },
        {
            "file": "src\\soundfile.js",
            "line": 489,
            "description": "Set a p5.SoundFile's looping flag to true or false. If the sound\nis currently playing, this change will take effect when it\nreaches the end of the current playback.",
            "params": [
                {
                    "name": "Boolean",
                    "description": "set looping to true or false",
                    "type": "Boolean"
                }
            ],
            "class": "p5.SoundFile",
            "module": "p5.sound"
        },
        {
            "file": "src\\soundfile.js",
            "line": 512,
            "description": "Returns 'true' if a p5.SoundFile is currently looping and playing, 'false' if not.",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "p5.SoundFile",
            "module": "p5.sound"
        },
        {
            "file": "src\\soundfile.js",
            "line": 527,
            "description": "Returns true if a p5.SoundFile is playing, false if not (i.e.\npaused or stopped).",
            "itemtype": "method",
            "name": "isPlaying",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "p5.SoundFile",
            "module": "p5.sound"
        },
        {
            "file": "src\\soundfile.js",
            "line": 538,
            "description": "Returns true if a p5.SoundFile is paused, false if not (i.e.\nplaying or stopped).",
            "itemtype": "method",
            "name": "isPaused",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "p5.SoundFile",
            "module": "p5.sound"
        },
        {
            "file": "src\\soundfile.js",
            "line": 549,
            "description": "Stop soundfile playback.",
            "itemtype": "method",
            "name": "stop",
            "params": [
                {
                    "name": "startTime",
                    "description": "(optional) schedule event to occur\n                            in seconds from now",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5.SoundFile",
            "module": "p5.sound"
        },
        {
            "file": "src\\soundfile.js",
            "line": 577,
            "description": "Stop playback on all of this soundfile's sources.",
            "access": "private",
            "tagname": "",
            "class": "p5.SoundFile",
            "module": "p5.sound"
        },
        {
            "file": "src\\soundfile.js",
            "line": 598,
            "description": "Multiply the output volume (amplitude) of a sound file\nbetween 0.0 (silence) and 1.0 (full volume).\n1.0 is the maximum amplitude of a digital sound, so multiplying\nby greater than 1.0 may cause digital distortion. To\nfade, provide a <code>rampTime</code> parameter. For more\ncomplex fades, see the Env class.\n\nAlternately, you can pass in a signal source such as an\noscillator to modulate the amplitude with an audio signal.",
            "itemtype": "method",
            "name": "setVolume",
            "params": [
                {
                    "name": "volume",
                    "description": "Volume (amplitude) between 0.0\n                                   and 1.0 or modulating signal/oscillator",
                    "type": "Number|Object"
                },
                {
                    "name": "rampTime",
                    "description": "Fade for t seconds",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "timeFromNow",
                    "description": "Schedule this event to happen at\n                               t seconds in the future",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5.SoundFile",
            "module": "p5.sound"
        },
        {
            "file": "src\\soundfile.js",
            "line": 644,
            "description": "Set the stereo panning of a p5.sound object to\na floating point number between -1.0 (left) and 1.0 (right).\nDefault is 0.0 (center).",
            "itemtype": "method",
            "name": "pan",
            "params": [
                {
                    "name": "panValue",
                    "description": "Set the stereo panner",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "timeFromNow",
                    "description": "schedule this event to happen\n                               seconds from now",
                    "type": "Number"
                }
            ],
            "example": [
                "\n<div><code>\n\n var ball = {};\n var soundFile;\n\n function setup() {\n   soundFormats('ogg', 'mp3');\n   soundFile = loadSound('assets/beatbox.mp3');\n }\n \n function draw() {\n   background(0);\n   ball.x = constrain(mouseX, 0, width);\n   ellipse(ball.x, height/2, 20, 20)\n }\n \n function mousePressed(){\n   // map the ball's x location to a panning degree \n   // between -1.0 (left) and 1.0 (right)\n   var panning = map(ball.x, 0., width,-1.0, 1.0);\n   soundFile.pan(panning);\n   soundFile.play();\n }\n </div></code>"
            ],
            "class": "p5.SoundFile",
            "module": "p5.sound"
        },
        {
            "file": "src\\soundfile.js",
            "line": 684,
            "description": "Returns the current stereo pan position (-1.0 to 1.0)",
            "return": {
                "description": "Returns the stereo pan setting of the Oscillator\n                         as a number between -1.0 (left) and 1.0 (right).\n                         0.0 is center and default.",
                "type": "Number"
            },
            "class": "p5.SoundFile",
            "module": "p5.sound"
        },
        {
            "file": "src\\soundfile.js",
            "line": 695,
            "description": "Set the playback rate of a sound file. Will change the speed and the pitch.\nValues less than zero will reverse the audio buffer.",
            "itemtype": "method",
            "name": "rate",
            "params": [
                {
                    "name": "playbackRate",
                    "description": "Set the playback rate. 1.0 is normal,\n                                   .5 is half-speed, 2.0 is twice as fast.\n                                   Must be greater than zero.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "example": [
                "\n<div><code>\nvar song;\n\nfunction preload() {\n  song = loadSound('assets/Damscray_DancingTiger.mp3');\n}\n\nfunction setup() {\n  song.loop();\n}\n\nfunction draw() {\n  background(200);\n  \n  // Set the rate to a range between 0.1 and 4\n  // Changing the rate also alters the pitch\n  var speed = map(mouseY, 0.1, height, 0, 2);\n  speed = constrain(speed, 0.01, 4);\n  song.rate(speed);\n  \n  // Draw a circle to show what is going on\n  stroke(0);\n  fill(51, 100);\n  ellipse(mouseX, 100, 48, 48);\n}\n\n </code>\n </div>\n"
            ],
            "class": "p5.SoundFile",
            "module": "p5.sound"
        },
        {
            "file": "src\\soundfile.js",
            "line": 780,
            "description": "Returns the duration of a sound file in seconds.",
            "itemtype": "method",
            "name": "duration",
            "return": {
                "description": "The duration of the soundFile in seconds.",
                "type": "Number"
            },
            "class": "p5.SoundFile",
            "module": "p5.sound"
        },
        {
            "file": "src\\soundfile.js",
            "line": 795,
            "description": "Return the current position of the p5.SoundFile playhead, in seconds.\nNote that if you change the playbackRate while the p5.SoundFile is\nplaying, the results may not be accurate.",
            "itemtype": "method",
            "name": "currentTime",
            "return": {
                "description": "currentTime of the soundFile in seconds.",
                "type": "Number"
            },
            "class": "p5.SoundFile",
            "module": "p5.sound"
        },
        {
            "file": "src\\soundfile.js",
            "line": 812,
            "description": "Move the playhead of the song to a position, in seconds. Start\nand Stop time. If none are given, will reset the file to play\nentire duration from start to finish.",
            "itemtype": "method",
            "name": "jump",
            "params": [
                {
                    "name": "cueTime",
                    "description": "cueTime of the soundFile in seconds.",
                    "type": "Number"
                },
                {
                    "name": "uuration",
                    "description": "duration in seconds.",
                    "type": "Number"
                }
            ],
            "class": "p5.SoundFile",
            "module": "p5.sound"
        },
        {
            "file": "src\\soundfile.js",
            "line": 839,
            "description": "Return the number of channels in a sound file.\nFor example, Mono = 1, Stereo = 2.",
            "itemtype": "method",
            "name": "channels",
            "return": {
                "description": "[channels]",
                "type": "Number"
            },
            "class": "p5.SoundFile",
            "module": "p5.sound"
        },
        {
            "file": "src\\soundfile.js",
            "line": 850,
            "description": "Return the sample rate of the sound file.",
            "itemtype": "method",
            "name": "sampleRate",
            "return": {
                "description": "[sampleRate]",
                "type": "Number"
            },
            "class": "p5.SoundFile",
            "module": "p5.sound"
        },
        {
            "file": "src\\soundfile.js",
            "line": 860,
            "description": "Return the number of samples in a sound file.\nEqual to sampleRate * duration.",
            "itemtype": "method",
            "name": "frames",
            "return": {
                "description": "[sampleCount]",
                "type": "Number"
            },
            "class": "p5.SoundFile",
            "module": "p5.sound"
        },
        {
            "file": "src\\soundfile.js",
            "line": 871,
            "description": "Returns an array of amplitude peaks in a p5.SoundFile that can be\nused to draw a static waveform. Scans through the p5.SoundFile's\naudio buffer to find the greatest amplitudes. Accepts one\nparameter, 'length', which determines size of the array.\nLarger arrays result in more precise waveform visualizations.\n\nInspired by Wavesurfer.js.",
            "itemtype": "method",
            "name": "getPeaks",
            "params": [
                {
                    "name": "length",
                    "description": "length is the size of the returned array.\n                         Larger length results in more precision.\n                         Defaults to 5*width of the browser window.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "Array of peaks.",
                "type": "Float32Array"
            },
            "class": "p5.SoundFile",
            "module": "p5.sound"
        },
        {
            "file": "src\\soundfile.js",
            "line": 928,
            "description": "Reverses the p5.SoundFile's buffer source.\nPlayback must be handled separately (see example).",
            "itemtype": "method",
            "name": "reverseBuffer",
            "example": [
                "\n<div><code>\nvar drum;\n\nfunction preload() {\n  drum = loadSound('assets/drum.mp3');\n}\n\nfunction setup() {\n  drum.reverseBuffer();\n  drum.play();\n}\n\n </code>\n </div>"
            ],
            "class": "p5.SoundFile",
            "module": "p5.sound"
        },
        {
            "file": "src\\soundfile.js",
            "line": 1007,
            "description": "Connects the output of a p5sound object to input of another\np5.sound object. For example, you may connect a p5.SoundFile to an\nFFT or an Effect. If no parameter is given, it will connect to\nthe master output. Most p5sound objects connect to the master\noutput when they are created.",
            "itemtype": "method",
            "name": "connect",
            "params": [
                {
                    "name": "object",
                    "description": "Audio object that accepts an input",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "p5.SoundFile",
            "module": "p5.sound"
        },
        {
            "file": "src\\soundfile.js",
            "line": 1030,
            "description": "Disconnects the output of this p5sound object.",
            "itemtype": "method",
            "name": "disconnect",
            "class": "p5.SoundFile",
            "module": "p5.sound"
        },
        {
            "file": "src\\soundfile.js",
            "line": 1039,
            "description": "Read the Amplitude (volume level) of a p5.SoundFile. The\np5.SoundFile class contains its own instance of the Amplitude\nclass to help make it easy to get a SoundFile's volume level.\nAccepts an optional smoothing value (0.0 < 1.0).",
            "itemtype": "method",
            "name": "getLevel",
            "params": [
                {
                    "name": "smoothing",
                    "description": "Smoothing is 0.0 by default.\n                             Smooths values based on previous values.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "Volume level (between 0.0 and 1.0)",
                "type": "Number"
            },
            "class": "p5.SoundFile",
            "module": "p5.sound"
        },
        {
            "file": "src\\soundfile.js",
            "line": 1057,
            "description": "Reset the source for this SoundFile to a\nnew path (URL).",
            "itemtype": "method",
            "name": "setPath",
            "params": [
                {
                    "name": "path",
                    "description": "path to audio file",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Callback",
                    "type": "Function"
                }
            ],
            "class": "p5.SoundFile",
            "module": "p5.sound"
        },
        {
            "file": "src\\soundfile.js",
            "line": 1071,
            "description": "Replace the current Audio Buffer with a new Buffer.",
            "params": [
                {
                    "name": "buf",
                    "description": "Array of Float32 Array(s). 2 Float32 Arrays\n                   will create a stereo source. 1 will create\n                   a mono source.",
                    "type": "Array"
                }
            ],
            "class": "p5.SoundFile",
            "module": "p5.sound"
        },
        {
            "file": "src\\soundfile.js",
            "line": 1160,
            "description": "processPeaks returns an array of timestamps where it thinks there is a beat.\n\nThis is an asynchronous function that processes the soundfile in an offline audio context,\nand sends the results to your callback function.\n\nThe process involves running the soundfile through a lowpass filter, and finding all of the\npeaks above the initial threshold. If the total number of peaks are below the minimum number of peaks,\nit decreases the threshold and re-runs the analysis until either minPeaks or minThreshold are reached.",
            "itemtype": "method",
            "name": "processPeaks",
            "params": [
                {
                    "name": "callback",
                    "description": "a function to call once this data is returned",
                    "type": "Function"
                },
                {
                    "name": "initThreshold",
                    "description": "initial threshold defaults to 0.9",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "minThreshold",
                    "description": "minimum threshold defaults to 0.22",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "minPeaks",
                    "description": "minimum number of peaks defaults to 200",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "Array of timestamped peaks",
                "type": "Array"
            },
            "class": "p5.SoundFile",
            "module": "p5.sound"
        },
        {
            "file": "src\\soundfile.js",
            "line": 1401,
            "class": "p5.SoundFile",
            "module": "p5.sound"
        },
        {
            "file": "src\\soundfile.js",
            "line": 1403,
            "description": "Schedule events to trigger every time a MediaElement\n(audio/video) reaches a playback cue point.\n\nAccepts a callback function, a time (in seconds) at which to trigger\nthe callback, and an optional parameter for the callback.\n\nTime will be passed as the first parameter to the callback function,\nand param will be the second parameter.",
            "itemtype": "method",
            "name": "addCue",
            "params": [
                {
                    "name": "time",
                    "description": "Time in seconds, relative to this media\n                           element's playback. For example, to trigger\n                           an event every time playback reaches two\n                           seconds, pass in the number 2. This will be\n                           passed as the first parameter to\n                           the callback function.",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "Name of a function that will be\n                           called at the given time. The callback will\n                           receive time and (optionally) param as its\n                           two parameters.",
                    "type": "Function"
                },
                {
                    "name": "value",
                    "description": "An object to be passed as the\n                           second parameter to the\n                           callback function.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "id ID of this cue,\n                    useful for removeCue(id)",
                "type": "Number"
            },
            "example": [
                "\n<div><code>\nfunction setup() {\n  background(0);\n  noStroke();\n  fill(255);\n  textAlign(CENTER);\n  text('click to play', width/2, height/2);\n  \n  mySound = loadSound('assets/beat.mp3');\n\n  // schedule calls to changeText\n  mySound.addCue(0.50, changeText, \"hello\" );\n  mySound.addCue(1.00, changeText, \"p5\" );\n  mySound.addCue(1.50, changeText, \"what\" );\n  mySound.addCue(2.00, changeText, \"do\" );\n  mySound.addCue(2.50, changeText, \"you\" );\n  mySound.addCue(3.00, changeText, \"want\" );\n  mySound.addCue(4.00, changeText, \"to\" );\n  mySound.addCue(5.00, changeText, \"make\" );\n  mySound.addCue(6.00, changeText, \"?\" );\n}\n\nfunction changeText(val) {\n  background(0);\n  text(val, width/2, height/2);\n}\n\nfunction mouseClicked() {\n  if (mouseX > 0 && mouseX < width && mouseY > 0 && mouseY < height) {\n    if (mySound.isPlaying() ) {\n      mySound.stop();\n    } else {\n      mySound.play();\n    }\n  }\n}\n</code></div>"
            ],
            "class": "p5.SoundFile",
            "module": "p5.sound"
        },
        {
            "file": "src\\soundfile.js",
            "line": 1482,
            "description": "Remove a callback based on its ID. The ID is returned by the\naddCue method.",
            "itemtype": "method",
            "name": "removeCue",
            "params": [
                {
                    "name": "id",
                    "description": "ID of the cue, as returned by addCue",
                    "type": "Number"
                }
            ],
            "class": "p5.SoundFile",
            "module": "p5.sound"
        },
        {
            "file": "src\\soundfile.js",
            "line": 1503,
            "description": "Remove all of the callbacks that had originally been scheduled\nvia the addCue method.",
            "itemtype": "method",
            "name": "clearCues",
            "class": "p5.SoundFile",
            "module": "p5.sound"
        }
    ],
    "warnings": [
        {
            "message": "param name missing: {String}",
            "line": " src\\filter.js:185"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src\\soundfile.js:871"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\soundfile.js:871"
        },
        {
            "message": "Missing item type\nAdd input sources to the list of available sources.",
            "line": " src\\audioin.js:192"
        },
        {
            "message": "Missing item type\nReturns the closest MIDI note value for\na given frequency.",
            "line": " src\\helpers.js:28"
        },
        {
            "message": "Missing item type\nUsed by Osc and Env to chain signal math",
            "line": " src\\helpers.js:188"
        },
        {
            "message": "Missing item type\nSet the global tempo, in beats per minute, for all\np5.Parts. This method will impact all active p5.Parts.",
            "line": " src\\looper.js:8"
        },
        {
            "message": "Missing item type\nSet the tempo for all parts in the score",
            "line": " src\\looper.js:485"
        },
        {
            "message": "Missing item type\nMaster contains AudioContext and the master sound output.",
            "line": " src\\master.js:7"
        },
        {
            "message": "Missing item type\na silent connection to the DesinationNode\nwhich will ensure that anything connected to it\nwill not be garbage collected",
            "line": " src\\master.js:143"
        },
        {
            "message": "Missing item type\nSet the amplitude of the noise between 0 and 1.0. Or,\nmodulate amplitude with an audio signal such as an oscillator.",
            "line": " src\\noise.js:147"
        },
        {
            "message": "Missing item type\nonPeak accepts two arguments: a function to call when\na peak is detected, and optionally a value to pass\ninto that function.",
            "line": " src\\peakDetect.js:162"
        },
        {
            "message": "Missing item type\nInspired by Simple Reverb by Jordan Santell\nhttps://github.com/web-audio-components/simple-reverb/blob/master/index.js\n \nUtility function for building an impulse response\nbased on the module parameters.",
            "line": " src\\reverb.js:156"
        },
        {
            "message": "Missing item type\nPrivate method to load a buffer as an Impulse Response,\nassign it to the convolverNode, and add to the Array of .impulses.",
            "line": " src\\reverb.js:334"
        },
        {
            "message": "Missing item type\nConnect a p5.sound object or Web Audio node to this\np5.Signal so that its amplitude values can be scaled.",
            "line": " src\\signal.js:74"
        },
        {
            "message": "Missing item type\np5.sound developed by Jason Sigal for the Processing Foundation, Google Summer of Code 2014. The MIT License (MIT).\n\nhttp://github.com/therewasaguy/p5.sound\n\nSome of the many audio libraries & resources that inspire p5.sound:\n - TONE.js (c) Yotam Mann, 2014. Licensed under The MIT License (MIT). https://github.com/TONEnoTONE/Tone.js\n - buzz.js (c) Jay Salvat, 2013. Licensed under The MIT License (MIT). http://buzz.jaysalvat.com/\n - Boris Smus Web Audio API book, 2013. Licensed under the Apache License http://www.apache.org/licenses/LICENSE-2.0\n - wavesurfer.js https://github.com/katspaugh/wavesurfer.js\n - Web Audio Components by Jordan Santell https://github.com/web-audio-components\n - Wilm Thoben's Sound library for Processing https://github.com/processing/processing/tree/master/java/libraries/sound\n \n Web Audio API: http://w3.org/TR/webaudio/",
            "line": " src\\sndcore.js:46"
        },
        {
            "message": "Missing item type\nWeb Audio SHIMS and helper functions to ensure compatability across browsers",
            "line": " src\\sndcore.js:65"
        },
        {
            "message": "Missing item type\nDetermine which filetypes are supported (inspired by buzz.js)\nThe audio element (el) will only be used to test browser support for various audio formats",
            "line": " src\\sndcore.js:116"
        },
        {
            "message": "Missing item type\ncallback invoked when the recording is over",
            "line": " src\\soundRecorder.js:91"
        },
        {
            "message": "Missing item type\ninternal method called on audio process",
            "line": " src\\soundRecorder.js:185"
        },
        {
            "message": "Missing item type\nThis is a helper function that the p5.SoundFile calls to load\nitself. Accepts a callback (the name of another function)\nas an optional parameter.",
            "line": " src\\soundfile.js:171"
        },
        {
            "message": "Missing item type\nSet a p5.SoundFile's looping flag to true or false. If the sound\nis currently playing, this change will take effect when it\nreaches the end of the current playback.",
            "line": " src\\soundfile.js:489"
        },
        {
            "message": "Missing item type\nReturns 'true' if a p5.SoundFile is currently looping and playing, 'false' if not.",
            "line": " src\\soundfile.js:512"
        },
        {
            "message": "Missing item type\nStop playback on all of this soundfile's sources.",
            "line": " src\\soundfile.js:577"
        },
        {
            "message": "Missing item type\nReturns the current stereo pan position (-1.0 to 1.0)",
            "line": " src\\soundfile.js:684"
        },
        {
            "message": "Missing item type\nReplace the current Audio Buffer with a new Buffer.",
            "line": " src\\soundfile.js:1071"
        },
        {
            "message": "Missing item type",
            "line": " src\\soundfile.js:1401"
        }
    ]
}